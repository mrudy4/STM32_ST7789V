
led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c94  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000a8d8  08002da0  08002da0  00012da0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d678  0800d678  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  0800d678  0800d678  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d678  0800d678  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d678  0800d678  0001d678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d67c  0800d67c  0001d67c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  0800d680  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  20000024  0800d6a4  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000e4  0800d6a4  000200e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002004d  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000933f  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c6e  00000000  00000000  000293cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000910  00000000  00000000  0002b040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001aa9  00000000  00000000  0002b950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000aeb1  00000000  00000000  0002d3f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080854  00000000  00000000  000382aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 000006d9  00000000  00000000  000b8afe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002340  00000000  00000000  000b91d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  000bb518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000024 	.word	0x20000024
 8000128:	00000000 	.word	0x00000000
 800012c:	08002d88 	.word	0x08002d88

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000028 	.word	0x20000028
 8000148:	08002d88 	.word	0x08002d88

0800014c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000152:	f107 0310 	add.w	r3, r7, #16
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	605a      	str	r2, [r3, #4]
 800015c:	609a      	str	r2, [r3, #8]
 800015e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000160:	4b40      	ldr	r3, [pc, #256]	; (8000264 <MX_GPIO_Init+0x118>)
 8000162:	699b      	ldr	r3, [r3, #24]
 8000164:	4a3f      	ldr	r2, [pc, #252]	; (8000264 <MX_GPIO_Init+0x118>)
 8000166:	f043 0310 	orr.w	r3, r3, #16
 800016a:	6193      	str	r3, [r2, #24]
 800016c:	4b3d      	ldr	r3, [pc, #244]	; (8000264 <MX_GPIO_Init+0x118>)
 800016e:	699b      	ldr	r3, [r3, #24]
 8000170:	f003 0310 	and.w	r3, r3, #16
 8000174:	60fb      	str	r3, [r7, #12]
 8000176:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000178:	4b3a      	ldr	r3, [pc, #232]	; (8000264 <MX_GPIO_Init+0x118>)
 800017a:	699b      	ldr	r3, [r3, #24]
 800017c:	4a39      	ldr	r2, [pc, #228]	; (8000264 <MX_GPIO_Init+0x118>)
 800017e:	f043 0320 	orr.w	r3, r3, #32
 8000182:	6193      	str	r3, [r2, #24]
 8000184:	4b37      	ldr	r3, [pc, #220]	; (8000264 <MX_GPIO_Init+0x118>)
 8000186:	699b      	ldr	r3, [r3, #24]
 8000188:	f003 0320 	and.w	r3, r3, #32
 800018c:	60bb      	str	r3, [r7, #8]
 800018e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000190:	4b34      	ldr	r3, [pc, #208]	; (8000264 <MX_GPIO_Init+0x118>)
 8000192:	699b      	ldr	r3, [r3, #24]
 8000194:	4a33      	ldr	r2, [pc, #204]	; (8000264 <MX_GPIO_Init+0x118>)
 8000196:	f043 0304 	orr.w	r3, r3, #4
 800019a:	6193      	str	r3, [r2, #24]
 800019c:	4b31      	ldr	r3, [pc, #196]	; (8000264 <MX_GPIO_Init+0x118>)
 800019e:	699b      	ldr	r3, [r3, #24]
 80001a0:	f003 0304 	and.w	r3, r3, #4
 80001a4:	607b      	str	r3, [r7, #4]
 80001a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001a8:	4b2e      	ldr	r3, [pc, #184]	; (8000264 <MX_GPIO_Init+0x118>)
 80001aa:	699b      	ldr	r3, [r3, #24]
 80001ac:	4a2d      	ldr	r2, [pc, #180]	; (8000264 <MX_GPIO_Init+0x118>)
 80001ae:	f043 0308 	orr.w	r3, r3, #8
 80001b2:	6193      	str	r3, [r2, #24]
 80001b4:	4b2b      	ldr	r3, [pc, #172]	; (8000264 <MX_GPIO_Init+0x118>)
 80001b6:	699b      	ldr	r3, [r3, #24]
 80001b8:	f003 0308 	and.w	r3, r3, #8
 80001bc:	603b      	str	r3, [r7, #0]
 80001be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, bl_Pin|res_Pin|dc_Pin, GPIO_PIN_RESET);
 80001c0:	2200      	movs	r2, #0
 80001c2:	210d      	movs	r1, #13
 80001c4:	4828      	ldr	r0, [pc, #160]	; (8000268 <MX_GPIO_Init+0x11c>)
 80001c6:	f001 fe1d 	bl	8001e04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80001ca:	2200      	movs	r2, #0
 80001cc:	2120      	movs	r1, #32
 80001ce:	4827      	ldr	r0, [pc, #156]	; (800026c <MX_GPIO_Init+0x120>)
 80001d0:	f001 fe18 	bl	8001e04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80001d4:	2200      	movs	r2, #0
 80001d6:	2102      	movs	r1, #2
 80001d8:	4825      	ldr	r0, [pc, #148]	; (8000270 <MX_GPIO_Init+0x124>)
 80001da:	f001 fe13 	bl	8001e04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80001de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80001e4:	4b23      	ldr	r3, [pc, #140]	; (8000274 <MX_GPIO_Init+0x128>)
 80001e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001e8:	2300      	movs	r3, #0
 80001ea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80001ec:	f107 0310 	add.w	r3, r7, #16
 80001f0:	4619      	mov	r1, r3
 80001f2:	481d      	ldr	r0, [pc, #116]	; (8000268 <MX_GPIO_Init+0x11c>)
 80001f4:	f001 fc82 	bl	8001afc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = bl_Pin|res_Pin|dc_Pin;
 80001f8:	230d      	movs	r3, #13
 80001fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001fc:	2301      	movs	r3, #1
 80001fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000200:	2300      	movs	r3, #0
 8000202:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000204:	2302      	movs	r3, #2
 8000206:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000208:	f107 0310 	add.w	r3, r7, #16
 800020c:	4619      	mov	r1, r3
 800020e:	4816      	ldr	r0, [pc, #88]	; (8000268 <MX_GPIO_Init+0x11c>)
 8000210:	f001 fc74 	bl	8001afc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000214:	2320      	movs	r3, #32
 8000216:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000218:	2301      	movs	r3, #1
 800021a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800021c:	2300      	movs	r3, #0
 800021e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000220:	2302      	movs	r3, #2
 8000222:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000224:	f107 0310 	add.w	r3, r7, #16
 8000228:	4619      	mov	r1, r3
 800022a:	4810      	ldr	r0, [pc, #64]	; (800026c <MX_GPIO_Init+0x120>)
 800022c:	f001 fc66 	bl	8001afc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_Pin;
 8000230:	2302      	movs	r3, #2
 8000232:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000234:	2301      	movs	r3, #1
 8000236:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000238:	2300      	movs	r3, #0
 800023a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800023c:	2302      	movs	r3, #2
 800023e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8000240:	f107 0310 	add.w	r3, r7, #16
 8000244:	4619      	mov	r1, r3
 8000246:	480a      	ldr	r0, [pc, #40]	; (8000270 <MX_GPIO_Init+0x124>)
 8000248:	f001 fc58 	bl	8001afc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800024c:	2200      	movs	r2, #0
 800024e:	2100      	movs	r1, #0
 8000250:	2028      	movs	r0, #40	; 0x28
 8000252:	f001 fc1c 	bl	8001a8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000256:	2028      	movs	r0, #40	; 0x28
 8000258:	f001 fc35 	bl	8001ac6 <HAL_NVIC_EnableIRQ>

}
 800025c:	bf00      	nop
 800025e:	3720      	adds	r7, #32
 8000260:	46bd      	mov	sp, r7
 8000262:	bd80      	pop	{r7, pc}
 8000264:	40021000 	.word	0x40021000
 8000268:	40011000 	.word	0x40011000
 800026c:	40010800 	.word	0x40010800
 8000270:	40010c00 	.word	0x40010c00
 8000274:	10110000 	.word	0x10110000

08000278 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800027c:	f001 faaa 	bl	80017d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000280:	f000 f816 	bl	80002b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000284:	f7ff ff62 	bl	800014c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000288:	f001 fa16 	bl	80016b8 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 800028c:	f000 f856 	bl	800033c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOC, bl_Pin, 1);
 8000290:	2201      	movs	r2, #1
 8000292:	2101      	movs	r1, #1
 8000294:	4805      	ldr	r0, [pc, #20]	; (80002ac <main+0x34>)
 8000296:	f001 fdb5 	bl	8001e04 <HAL_GPIO_WritePin>
  ST7789_Init();
 800029a:	f000 f9d3 	bl	8000644 <ST7789_Init>
  HAL_Delay(100);
 800029e:	2064      	movs	r0, #100	; 0x64
 80002a0:	f001 fafa 	bl	8001898 <HAL_Delay>
  ST7789_Test();
 80002a4:	f000 fff8 	bl	8001298 <ST7789_Test>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002a8:	e7fe      	b.n	80002a8 <main+0x30>
 80002aa:	bf00      	nop
 80002ac:	40011000 	.word	0x40011000

080002b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b090      	sub	sp, #64	; 0x40
 80002b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002b6:	f107 0318 	add.w	r3, r7, #24
 80002ba:	2228      	movs	r2, #40	; 0x28
 80002bc:	2100      	movs	r1, #0
 80002be:	4618      	mov	r0, r3
 80002c0:	f002 fd36 	bl	8002d30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002c4:	1d3b      	adds	r3, r7, #4
 80002c6:	2200      	movs	r2, #0
 80002c8:	601a      	str	r2, [r3, #0]
 80002ca:	605a      	str	r2, [r3, #4]
 80002cc:	609a      	str	r2, [r3, #8]
 80002ce:	60da      	str	r2, [r3, #12]
 80002d0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002d2:	2302      	movs	r3, #2
 80002d4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002d6:	2301      	movs	r3, #1
 80002d8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002da:	2310      	movs	r3, #16
 80002dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002de:	2302      	movs	r3, #2
 80002e0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80002e2:	2300      	movs	r3, #0
 80002e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80002e6:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80002ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ec:	f107 0318 	add.w	r3, r7, #24
 80002f0:	4618      	mov	r0, r3
 80002f2:	f001 fdc1 	bl	8001e78 <HAL_RCC_OscConfig>
 80002f6:	4603      	mov	r3, r0
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d001      	beq.n	8000300 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80002fc:	f000 f819 	bl	8000332 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000300:	230f      	movs	r3, #15
 8000302:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000304:	2302      	movs	r3, #2
 8000306:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000308:	2300      	movs	r3, #0
 800030a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800030c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000310:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000312:	2300      	movs	r3, #0
 8000314:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000316:	1d3b      	adds	r3, r7, #4
 8000318:	2102      	movs	r1, #2
 800031a:	4618      	mov	r0, r3
 800031c:	f002 f82e 	bl	800237c <HAL_RCC_ClockConfig>
 8000320:	4603      	mov	r3, r0
 8000322:	2b00      	cmp	r3, #0
 8000324:	d001      	beq.n	800032a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000326:	f000 f804 	bl	8000332 <Error_Handler>
  }
}
 800032a:	bf00      	nop
 800032c:	3740      	adds	r7, #64	; 0x40
 800032e:	46bd      	mov	sp, r7
 8000330:	bd80      	pop	{r7, pc}

08000332 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000332:	b480      	push	{r7}
 8000334:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000336:	b672      	cpsid	i
}
 8000338:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800033a:	e7fe      	b.n	800033a <Error_Handler+0x8>

0800033c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000340:	4b18      	ldr	r3, [pc, #96]	; (80003a4 <MX_SPI2_Init+0x68>)
 8000342:	4a19      	ldr	r2, [pc, #100]	; (80003a8 <MX_SPI2_Init+0x6c>)
 8000344:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000346:	4b17      	ldr	r3, [pc, #92]	; (80003a4 <MX_SPI2_Init+0x68>)
 8000348:	f44f 7282 	mov.w	r2, #260	; 0x104
 800034c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 800034e:	4b15      	ldr	r3, [pc, #84]	; (80003a4 <MX_SPI2_Init+0x68>)
 8000350:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000354:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000356:	4b13      	ldr	r3, [pc, #76]	; (80003a4 <MX_SPI2_Init+0x68>)
 8000358:	2200      	movs	r2, #0
 800035a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800035c:	4b11      	ldr	r3, [pc, #68]	; (80003a4 <MX_SPI2_Init+0x68>)
 800035e:	2202      	movs	r2, #2
 8000360:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000362:	4b10      	ldr	r3, [pc, #64]	; (80003a4 <MX_SPI2_Init+0x68>)
 8000364:	2200      	movs	r2, #0
 8000366:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000368:	4b0e      	ldr	r3, [pc, #56]	; (80003a4 <MX_SPI2_Init+0x68>)
 800036a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800036e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000370:	4b0c      	ldr	r3, [pc, #48]	; (80003a4 <MX_SPI2_Init+0x68>)
 8000372:	2208      	movs	r2, #8
 8000374:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000376:	4b0b      	ldr	r3, [pc, #44]	; (80003a4 <MX_SPI2_Init+0x68>)
 8000378:	2200      	movs	r2, #0
 800037a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800037c:	4b09      	ldr	r3, [pc, #36]	; (80003a4 <MX_SPI2_Init+0x68>)
 800037e:	2200      	movs	r2, #0
 8000380:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000382:	4b08      	ldr	r3, [pc, #32]	; (80003a4 <MX_SPI2_Init+0x68>)
 8000384:	2200      	movs	r2, #0
 8000386:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000388:	4b06      	ldr	r3, [pc, #24]	; (80003a4 <MX_SPI2_Init+0x68>)
 800038a:	220a      	movs	r2, #10
 800038c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800038e:	4805      	ldr	r0, [pc, #20]	; (80003a4 <MX_SPI2_Init+0x68>)
 8000390:	f002 f982 	bl	8002698 <HAL_SPI_Init>
 8000394:	4603      	mov	r3, r0
 8000396:	2b00      	cmp	r3, #0
 8000398:	d001      	beq.n	800039e <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 800039a:	f7ff ffca 	bl	8000332 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800039e:	bf00      	nop
 80003a0:	bd80      	pop	{r7, pc}
 80003a2:	bf00      	nop
 80003a4:	20000040 	.word	0x20000040
 80003a8:	40003800 	.word	0x40003800

080003ac <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b088      	sub	sp, #32
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003b4:	f107 0310 	add.w	r3, r7, #16
 80003b8:	2200      	movs	r2, #0
 80003ba:	601a      	str	r2, [r3, #0]
 80003bc:	605a      	str	r2, [r3, #4]
 80003be:	609a      	str	r2, [r3, #8]
 80003c0:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI2)
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	4a16      	ldr	r2, [pc, #88]	; (8000420 <HAL_SPI_MspInit+0x74>)
 80003c8:	4293      	cmp	r3, r2
 80003ca:	d124      	bne.n	8000416 <HAL_SPI_MspInit+0x6a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80003cc:	4b15      	ldr	r3, [pc, #84]	; (8000424 <HAL_SPI_MspInit+0x78>)
 80003ce:	69db      	ldr	r3, [r3, #28]
 80003d0:	4a14      	ldr	r2, [pc, #80]	; (8000424 <HAL_SPI_MspInit+0x78>)
 80003d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003d6:	61d3      	str	r3, [r2, #28]
 80003d8:	4b12      	ldr	r3, [pc, #72]	; (8000424 <HAL_SPI_MspInit+0x78>)
 80003da:	69db      	ldr	r3, [r3, #28]
 80003dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80003e0:	60fb      	str	r3, [r7, #12]
 80003e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80003e4:	4b0f      	ldr	r3, [pc, #60]	; (8000424 <HAL_SPI_MspInit+0x78>)
 80003e6:	699b      	ldr	r3, [r3, #24]
 80003e8:	4a0e      	ldr	r2, [pc, #56]	; (8000424 <HAL_SPI_MspInit+0x78>)
 80003ea:	f043 0308 	orr.w	r3, r3, #8
 80003ee:	6193      	str	r3, [r2, #24]
 80003f0:	4b0c      	ldr	r3, [pc, #48]	; (8000424 <HAL_SPI_MspInit+0x78>)
 80003f2:	699b      	ldr	r3, [r3, #24]
 80003f4:	f003 0308 	and.w	r3, r3, #8
 80003f8:	60bb      	str	r3, [r7, #8]
 80003fa:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80003fc:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000400:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000402:	2302      	movs	r3, #2
 8000404:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000406:	2303      	movs	r3, #3
 8000408:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800040a:	f107 0310 	add.w	r3, r7, #16
 800040e:	4619      	mov	r1, r3
 8000410:	4805      	ldr	r0, [pc, #20]	; (8000428 <HAL_SPI_MspInit+0x7c>)
 8000412:	f001 fb73 	bl	8001afc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000416:	bf00      	nop
 8000418:	3720      	adds	r7, #32
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}
 800041e:	bf00      	nop
 8000420:	40003800 	.word	0x40003800
 8000424:	40021000 	.word	0x40021000
 8000428:	40010c00 	.word	0x40010c00

0800042c <ST7789_WriteCommand>:
 * @brief Write command to ST7789 controller
 * @param cmd -> command to write
 * @return none
 */
static void ST7789_WriteCommand(uint8_t cmd)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af00      	add	r7, sp, #0
 8000432:	4603      	mov	r3, r0
 8000434:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 8000436:	2200      	movs	r2, #0
 8000438:	2102      	movs	r1, #2
 800043a:	480c      	ldr	r0, [pc, #48]	; (800046c <ST7789_WriteCommand+0x40>)
 800043c:	f001 fce2 	bl	8001e04 <HAL_GPIO_WritePin>
	ST7789_DC_Clr();
 8000440:	2200      	movs	r2, #0
 8000442:	2108      	movs	r1, #8
 8000444:	480a      	ldr	r0, [pc, #40]	; (8000470 <ST7789_WriteCommand+0x44>)
 8000446:	f001 fcdd 	bl	8001e04 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 800044a:	1df9      	adds	r1, r7, #7
 800044c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000450:	2201      	movs	r2, #1
 8000452:	4808      	ldr	r0, [pc, #32]	; (8000474 <ST7789_WriteCommand+0x48>)
 8000454:	f002 f9a4 	bl	80027a0 <HAL_SPI_Transmit>
	ST7789_UnSelect();
 8000458:	2201      	movs	r2, #1
 800045a:	2102      	movs	r1, #2
 800045c:	4803      	ldr	r0, [pc, #12]	; (800046c <ST7789_WriteCommand+0x40>)
 800045e:	f001 fcd1 	bl	8001e04 <HAL_GPIO_WritePin>
}
 8000462:	bf00      	nop
 8000464:	3708      	adds	r7, #8
 8000466:	46bd      	mov	sp, r7
 8000468:	bd80      	pop	{r7, pc}
 800046a:	bf00      	nop
 800046c:	40010c00 	.word	0x40010c00
 8000470:	40011000 	.word	0x40011000
 8000474:	20000040 	.word	0x20000040

08000478 <ST7789_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void ST7789_WriteData(uint8_t *buff, size_t buff_size)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b084      	sub	sp, #16
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
 8000480:	6039      	str	r1, [r7, #0]
	ST7789_Select();
 8000482:	2200      	movs	r2, #0
 8000484:	2102      	movs	r1, #2
 8000486:	4815      	ldr	r0, [pc, #84]	; (80004dc <ST7789_WriteData+0x64>)
 8000488:	f001 fcbc 	bl	8001e04 <HAL_GPIO_WritePin>
	ST7789_DC_Set();
 800048c:	2201      	movs	r2, #1
 800048e:	2108      	movs	r1, #8
 8000490:	4813      	ldr	r0, [pc, #76]	; (80004e0 <ST7789_WriteData+0x68>)
 8000492:	f001 fcb7 	bl	8001e04 <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once

	while (buff_size > 0) {
 8000496:	e015      	b.n	80004c4 <ST7789_WriteData+0x4c>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 8000498:	683b      	ldr	r3, [r7, #0]
 800049a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800049e:	4293      	cmp	r3, r2
 80004a0:	bf28      	it	cs
 80004a2:	4613      	movcs	r3, r2
 80004a4:	81fb      	strh	r3, [r7, #14]
				{}
			}
			else
				HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
		#else
			HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 80004a6:	89fa      	ldrh	r2, [r7, #14]
 80004a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80004ac:	6879      	ldr	r1, [r7, #4]
 80004ae:	480d      	ldr	r0, [pc, #52]	; (80004e4 <ST7789_WriteData+0x6c>)
 80004b0:	f002 f976 	bl	80027a0 <HAL_SPI_Transmit>
		#endif
		buff += chunk_size;
 80004b4:	89fb      	ldrh	r3, [r7, #14]
 80004b6:	687a      	ldr	r2, [r7, #4]
 80004b8:	4413      	add	r3, r2
 80004ba:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 80004bc:	89fb      	ldrh	r3, [r7, #14]
 80004be:	683a      	ldr	r2, [r7, #0]
 80004c0:	1ad3      	subs	r3, r2, r3
 80004c2:	603b      	str	r3, [r7, #0]
	while (buff_size > 0) {
 80004c4:	683b      	ldr	r3, [r7, #0]
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d1e6      	bne.n	8000498 <ST7789_WriteData+0x20>
	}

	ST7789_UnSelect();
 80004ca:	2201      	movs	r2, #1
 80004cc:	2102      	movs	r1, #2
 80004ce:	4803      	ldr	r0, [pc, #12]	; (80004dc <ST7789_WriteData+0x64>)
 80004d0:	f001 fc98 	bl	8001e04 <HAL_GPIO_WritePin>
}
 80004d4:	bf00      	nop
 80004d6:	3710      	adds	r7, #16
 80004d8:	46bd      	mov	sp, r7
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	40010c00 	.word	0x40010c00
 80004e0:	40011000 	.word	0x40011000
 80004e4:	20000040 	.word	0x20000040

080004e8 <ST7789_WriteSmallData>:
 * @brief Write data to ST7789 controller, simplify for 8bit data.
 * data -> data to write
 * @return none
 */
static void ST7789_WriteSmallData(uint8_t data)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	4603      	mov	r3, r0
 80004f0:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 80004f2:	2200      	movs	r2, #0
 80004f4:	2102      	movs	r1, #2
 80004f6:	480c      	ldr	r0, [pc, #48]	; (8000528 <ST7789_WriteSmallData+0x40>)
 80004f8:	f001 fc84 	bl	8001e04 <HAL_GPIO_WritePin>
	ST7789_DC_Set();
 80004fc:	2201      	movs	r2, #1
 80004fe:	2108      	movs	r1, #8
 8000500:	480a      	ldr	r0, [pc, #40]	; (800052c <ST7789_WriteSmallData+0x44>)
 8000502:	f001 fc7f 	bl	8001e04 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &data, sizeof(data), HAL_MAX_DELAY);
 8000506:	1df9      	adds	r1, r7, #7
 8000508:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800050c:	2201      	movs	r2, #1
 800050e:	4808      	ldr	r0, [pc, #32]	; (8000530 <ST7789_WriteSmallData+0x48>)
 8000510:	f002 f946 	bl	80027a0 <HAL_SPI_Transmit>
	ST7789_UnSelect();
 8000514:	2201      	movs	r2, #1
 8000516:	2102      	movs	r1, #2
 8000518:	4803      	ldr	r0, [pc, #12]	; (8000528 <ST7789_WriteSmallData+0x40>)
 800051a:	f001 fc73 	bl	8001e04 <HAL_GPIO_WritePin>
}
 800051e:	bf00      	nop
 8000520:	3708      	adds	r7, #8
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	40010c00 	.word	0x40010c00
 800052c:	40011000 	.word	0x40011000
 8000530:	20000040 	.word	0x20000040

08000534 <ST7789_SetRotation>:
 * @brief Set the rotation direction of the display
 * @param m -> rotation parameter(please refer it in st7789.h)
 * @return none
 */
void ST7789_SetRotation(uint8_t m)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	4603      	mov	r3, r0
 800053c:	71fb      	strb	r3, [r7, #7]
	ST7789_WriteCommand(ST7789_MADCTL);	// MADCTL
 800053e:	2036      	movs	r0, #54	; 0x36
 8000540:	f7ff ff74 	bl	800042c <ST7789_WriteCommand>
	switch (m) {
 8000544:	79fb      	ldrb	r3, [r7, #7]
 8000546:	2b03      	cmp	r3, #3
 8000548:	d81a      	bhi.n	8000580 <ST7789_SetRotation+0x4c>
 800054a:	a201      	add	r2, pc, #4	; (adr r2, 8000550 <ST7789_SetRotation+0x1c>)
 800054c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000550:	08000561 	.word	0x08000561
 8000554:	08000569 	.word	0x08000569
 8000558:	08000571 	.word	0x08000571
 800055c:	08000579 	.word	0x08000579
	case 0:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
 8000560:	20c0      	movs	r0, #192	; 0xc0
 8000562:	f7ff ffc1 	bl	80004e8 <ST7789_WriteSmallData>
		break;
 8000566:	e00c      	b.n	8000582 <ST7789_SetRotation+0x4e>
	case 1:
		ST7789_WriteSmallData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8000568:	20a0      	movs	r0, #160	; 0xa0
 800056a:	f7ff ffbd 	bl	80004e8 <ST7789_WriteSmallData>
		break;
 800056e:	e008      	b.n	8000582 <ST7789_SetRotation+0x4e>
	case 2:
		ST7789_WriteSmallData(ST7789_MADCTL_RGB);
 8000570:	2000      	movs	r0, #0
 8000572:	f7ff ffb9 	bl	80004e8 <ST7789_WriteSmallData>
		break;
 8000576:	e004      	b.n	8000582 <ST7789_SetRotation+0x4e>
	case 3:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8000578:	2060      	movs	r0, #96	; 0x60
 800057a:	f7ff ffb5 	bl	80004e8 <ST7789_WriteSmallData>
		break;
 800057e:	e000      	b.n	8000582 <ST7789_SetRotation+0x4e>
	default:
		break;
 8000580:	bf00      	nop
	}
}
 8000582:	bf00      	nop
 8000584:	3708      	adds	r7, #8
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop

0800058c <ST7789_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 800058c:	b590      	push	{r4, r7, lr}
 800058e:	b087      	sub	sp, #28
 8000590:	af00      	add	r7, sp, #0
 8000592:	4604      	mov	r4, r0
 8000594:	4608      	mov	r0, r1
 8000596:	4611      	mov	r1, r2
 8000598:	461a      	mov	r2, r3
 800059a:	4623      	mov	r3, r4
 800059c:	80fb      	strh	r3, [r7, #6]
 800059e:	4603      	mov	r3, r0
 80005a0:	80bb      	strh	r3, [r7, #4]
 80005a2:	460b      	mov	r3, r1
 80005a4:	807b      	strh	r3, [r7, #2]
 80005a6:	4613      	mov	r3, r2
 80005a8:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 80005aa:	2200      	movs	r2, #0
 80005ac:	2102      	movs	r1, #2
 80005ae:	4824      	ldr	r0, [pc, #144]	; (8000640 <ST7789_SetAddressWindow+0xb4>)
 80005b0:	f001 fc28 	bl	8001e04 <HAL_GPIO_WritePin>
	uint16_t x_start = x0 + X_SHIFT, x_end = x1 + X_SHIFT;
 80005b4:	88fb      	ldrh	r3, [r7, #6]
 80005b6:	82fb      	strh	r3, [r7, #22]
 80005b8:	887b      	ldrh	r3, [r7, #2]
 80005ba:	82bb      	strh	r3, [r7, #20]
	uint16_t y_start = y0 + Y_SHIFT, y_end = y1 + Y_SHIFT;
 80005bc:	88bb      	ldrh	r3, [r7, #4]
 80005be:	827b      	strh	r3, [r7, #18]
 80005c0:	883b      	ldrh	r3, [r7, #0]
 80005c2:	823b      	strh	r3, [r7, #16]

	/* Column Address set */
	ST7789_WriteCommand(ST7789_CASET);
 80005c4:	202a      	movs	r0, #42	; 0x2a
 80005c6:	f7ff ff31 	bl	800042c <ST7789_WriteCommand>
	{
		uint8_t data[] = {x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
 80005ca:	8afb      	ldrh	r3, [r7, #22]
 80005cc:	0a1b      	lsrs	r3, r3, #8
 80005ce:	b29b      	uxth	r3, r3
 80005d0:	b2db      	uxtb	r3, r3
 80005d2:	733b      	strb	r3, [r7, #12]
 80005d4:	8afb      	ldrh	r3, [r7, #22]
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	737b      	strb	r3, [r7, #13]
 80005da:	8abb      	ldrh	r3, [r7, #20]
 80005dc:	0a1b      	lsrs	r3, r3, #8
 80005de:	b29b      	uxth	r3, r3
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	73bb      	strb	r3, [r7, #14]
 80005e4:	8abb      	ldrh	r3, [r7, #20]
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	73fb      	strb	r3, [r7, #15]
		ST7789_WriteData(data, sizeof(data));
 80005ea:	f107 030c 	add.w	r3, r7, #12
 80005ee:	2104      	movs	r1, #4
 80005f0:	4618      	mov	r0, r3
 80005f2:	f7ff ff41 	bl	8000478 <ST7789_WriteData>
	}

	/* Row Address set */
	ST7789_WriteCommand(ST7789_RASET);
 80005f6:	202b      	movs	r0, #43	; 0x2b
 80005f8:	f7ff ff18 	bl	800042c <ST7789_WriteCommand>
	{
		uint8_t data[] = {y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
 80005fc:	8a7b      	ldrh	r3, [r7, #18]
 80005fe:	0a1b      	lsrs	r3, r3, #8
 8000600:	b29b      	uxth	r3, r3
 8000602:	b2db      	uxtb	r3, r3
 8000604:	723b      	strb	r3, [r7, #8]
 8000606:	8a7b      	ldrh	r3, [r7, #18]
 8000608:	b2db      	uxtb	r3, r3
 800060a:	727b      	strb	r3, [r7, #9]
 800060c:	8a3b      	ldrh	r3, [r7, #16]
 800060e:	0a1b      	lsrs	r3, r3, #8
 8000610:	b29b      	uxth	r3, r3
 8000612:	b2db      	uxtb	r3, r3
 8000614:	72bb      	strb	r3, [r7, #10]
 8000616:	8a3b      	ldrh	r3, [r7, #16]
 8000618:	b2db      	uxtb	r3, r3
 800061a:	72fb      	strb	r3, [r7, #11]
		ST7789_WriteData(data, sizeof(data));
 800061c:	f107 0308 	add.w	r3, r7, #8
 8000620:	2104      	movs	r1, #4
 8000622:	4618      	mov	r0, r3
 8000624:	f7ff ff28 	bl	8000478 <ST7789_WriteData>
	}
	/* Write to RAM */
	ST7789_WriteCommand(ST7789_RAMWR);
 8000628:	202c      	movs	r0, #44	; 0x2c
 800062a:	f7ff feff 	bl	800042c <ST7789_WriteCommand>
	ST7789_UnSelect();
 800062e:	2201      	movs	r2, #1
 8000630:	2102      	movs	r1, #2
 8000632:	4803      	ldr	r0, [pc, #12]	; (8000640 <ST7789_SetAddressWindow+0xb4>)
 8000634:	f001 fbe6 	bl	8001e04 <HAL_GPIO_WritePin>
}
 8000638:	bf00      	nop
 800063a:	371c      	adds	r7, #28
 800063c:	46bd      	mov	sp, r7
 800063e:	bd90      	pop	{r4, r7, pc}
 8000640:	40010c00 	.word	0x40010c00

08000644 <ST7789_Init>:
 * @brief Initialize ST7789 controller
 * @param none
 * @return none
 */
void ST7789_Init(void)
{
 8000644:	b590      	push	{r4, r7, lr}
 8000646:	b08b      	sub	sp, #44	; 0x2c
 8000648:	af00      	add	r7, sp, #0
	#ifdef USE_DMA
		memset(disp_buf, 0, sizeof(disp_buf));
	#endif
	HAL_Delay(10);
 800064a:	200a      	movs	r0, #10
 800064c:	f001 f924 	bl	8001898 <HAL_Delay>
    ST7789_RST_Clr();
 8000650:	2200      	movs	r2, #0
 8000652:	2104      	movs	r1, #4
 8000654:	4846      	ldr	r0, [pc, #280]	; (8000770 <ST7789_Init+0x12c>)
 8000656:	f001 fbd5 	bl	8001e04 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 800065a:	200a      	movs	r0, #10
 800065c:	f001 f91c 	bl	8001898 <HAL_Delay>
    ST7789_RST_Set();
 8000660:	2201      	movs	r2, #1
 8000662:	2104      	movs	r1, #4
 8000664:	4842      	ldr	r0, [pc, #264]	; (8000770 <ST7789_Init+0x12c>)
 8000666:	f001 fbcd 	bl	8001e04 <HAL_GPIO_WritePin>
    HAL_Delay(20);
 800066a:	2014      	movs	r0, #20
 800066c:	f001 f914 	bl	8001898 <HAL_Delay>

    ST7789_WriteCommand(ST7789_COLMOD);		//	Set color mode
 8000670:	203a      	movs	r0, #58	; 0x3a
 8000672:	f7ff fedb 	bl	800042c <ST7789_WriteCommand>
    ST7789_WriteSmallData(ST7789_COLOR_MODE_16bit);
 8000676:	2055      	movs	r0, #85	; 0x55
 8000678:	f7ff ff36 	bl	80004e8 <ST7789_WriteSmallData>
  	ST7789_WriteCommand(0xB2);				//	Porch control
 800067c:	20b2      	movs	r0, #178	; 0xb2
 800067e:	f7ff fed5 	bl	800042c <ST7789_WriteCommand>
	{
		uint8_t data[] = {0x0C, 0x0C, 0x00, 0x33, 0x33};
 8000682:	4a3c      	ldr	r2, [pc, #240]	; (8000774 <ST7789_Init+0x130>)
 8000684:	f107 0320 	add.w	r3, r7, #32
 8000688:	e892 0003 	ldmia.w	r2, {r0, r1}
 800068c:	6018      	str	r0, [r3, #0]
 800068e:	3304      	adds	r3, #4
 8000690:	7019      	strb	r1, [r3, #0]
		ST7789_WriteData(data, sizeof(data));
 8000692:	f107 0320 	add.w	r3, r7, #32
 8000696:	2105      	movs	r1, #5
 8000698:	4618      	mov	r0, r3
 800069a:	f7ff feed 	bl	8000478 <ST7789_WriteData>
	}
	ST7789_SetRotation(ST7789_ROTATION);	//	MADCTL (Display Rotation)
 800069e:	2003      	movs	r0, #3
 80006a0:	f7ff ff48 	bl	8000534 <ST7789_SetRotation>

	/* Internal LCD Voltage generator settings */
    ST7789_WriteCommand(0XB7);				//	Gate Control
 80006a4:	20b7      	movs	r0, #183	; 0xb7
 80006a6:	f7ff fec1 	bl	800042c <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x35);			//	Default value
 80006aa:	2035      	movs	r0, #53	; 0x35
 80006ac:	f7ff ff1c 	bl	80004e8 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xBB);				//	VCOM setting
 80006b0:	20bb      	movs	r0, #187	; 0xbb
 80006b2:	f7ff febb 	bl	800042c <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x19);			//	0.725v (default 0.75v for 0x20)
 80006b6:	2019      	movs	r0, #25
 80006b8:	f7ff ff16 	bl	80004e8 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC0);				//	LCMCTRL
 80006bc:	20c0      	movs	r0, #192	; 0xc0
 80006be:	f7ff feb5 	bl	800042c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x2C);			//	Default value
 80006c2:	202c      	movs	r0, #44	; 0x2c
 80006c4:	f7ff ff10 	bl	80004e8 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC2);				//	VDV and VRH command Enable
 80006c8:	20c2      	movs	r0, #194	; 0xc2
 80006ca:	f7ff feaf 	bl	800042c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x01);			//	Default value
 80006ce:	2001      	movs	r0, #1
 80006d0:	f7ff ff0a 	bl	80004e8 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC3);				//	VRH set
 80006d4:	20c3      	movs	r0, #195	; 0xc3
 80006d6:	f7ff fea9 	bl	800042c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x12);			//	+-4.45v (defalut +-4.1v for 0x0B)
 80006da:	2012      	movs	r0, #18
 80006dc:	f7ff ff04 	bl	80004e8 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC4);				//	VDV set
 80006e0:	20c4      	movs	r0, #196	; 0xc4
 80006e2:	f7ff fea3 	bl	800042c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x20);			//	Default value
 80006e6:	2020      	movs	r0, #32
 80006e8:	f7ff fefe 	bl	80004e8 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC6);				//	Frame rate control in normal mode
 80006ec:	20c6      	movs	r0, #198	; 0xc6
 80006ee:	f7ff fe9d 	bl	800042c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x0F);			//	Default value (60HZ)
 80006f2:	200f      	movs	r0, #15
 80006f4:	f7ff fef8 	bl	80004e8 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xD0);				//	Power control
 80006f8:	20d0      	movs	r0, #208	; 0xd0
 80006fa:	f7ff fe97 	bl	800042c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0xA4);			//	Default value
 80006fe:	20a4      	movs	r0, #164	; 0xa4
 8000700:	f7ff fef2 	bl	80004e8 <ST7789_WriteSmallData>
    ST7789_WriteSmallData (0xA1);			//	Default value
 8000704:	20a1      	movs	r0, #161	; 0xa1
 8000706:	f7ff feef 	bl	80004e8 <ST7789_WriteSmallData>
	/**************** Division line ****************/

	ST7789_WriteCommand(0xE0);
 800070a:	20e0      	movs	r0, #224	; 0xe0
 800070c:	f7ff fe8e 	bl	800042c <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0D, 0x11, 0x13, 0x2B, 0x3F, 0x54, 0x4C, 0x18, 0x0D, 0x0B, 0x1F, 0x23};
 8000710:	4b19      	ldr	r3, [pc, #100]	; (8000778 <ST7789_Init+0x134>)
 8000712:	f107 0410 	add.w	r4, r7, #16
 8000716:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000718:	c407      	stmia	r4!, {r0, r1, r2}
 800071a:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 800071c:	f107 0310 	add.w	r3, r7, #16
 8000720:	210e      	movs	r1, #14
 8000722:	4618      	mov	r0, r3
 8000724:	f7ff fea8 	bl	8000478 <ST7789_WriteData>
	}

    ST7789_WriteCommand(0xE1);
 8000728:	20e1      	movs	r0, #225	; 0xe1
 800072a:	f7ff fe7f 	bl	800042c <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51, 0x2F, 0x1F, 0x1F, 0x20, 0x23};
 800072e:	4b13      	ldr	r3, [pc, #76]	; (800077c <ST7789_Init+0x138>)
 8000730:	463c      	mov	r4, r7
 8000732:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000734:	c407      	stmia	r4!, {r0, r1, r2}
 8000736:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8000738:	463b      	mov	r3, r7
 800073a:	210e      	movs	r1, #14
 800073c:	4618      	mov	r0, r3
 800073e:	f7ff fe9b 	bl	8000478 <ST7789_WriteData>
	}
    ST7789_WriteCommand (ST7789_INVON);		//	Inversion ON
 8000742:	2021      	movs	r0, #33	; 0x21
 8000744:	f7ff fe72 	bl	800042c <ST7789_WriteCommand>
	ST7789_WriteCommand (ST7789_SLPOUT);	//	Out of sleep mode
 8000748:	2011      	movs	r0, #17
 800074a:	f7ff fe6f 	bl	800042c <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_NORON);		//	Normal Display on
 800074e:	2013      	movs	r0, #19
 8000750:	f7ff fe6c 	bl	800042c <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_DISPON);	//	Main screen turned on
 8000754:	2029      	movs	r0, #41	; 0x29
 8000756:	f7ff fe69 	bl	800042c <ST7789_WriteCommand>

	HAL_Delay(50);
 800075a:	2032      	movs	r0, #50	; 0x32
 800075c:	f001 f89c 	bl	8001898 <HAL_Delay>
	ST7789_Fill_Color(BLACK);				//	Fill with Black.
 8000760:	2000      	movs	r0, #0
 8000762:	f000 f80d 	bl	8000780 <ST7789_Fill_Color>
}
 8000766:	bf00      	nop
 8000768:	372c      	adds	r7, #44	; 0x2c
 800076a:	46bd      	mov	sp, r7
 800076c:	bd90      	pop	{r4, r7, pc}
 800076e:	bf00      	nop
 8000770:	40011000 	.word	0x40011000
 8000774:	08002da0 	.word	0x08002da0
 8000778:	08002da8 	.word	0x08002da8
 800077c:	08002db8 	.word	0x08002db8

08000780 <ST7789_Fill_Color>:
 * @brief Fill the DisplayWindow with single color
 * @param color -> color to Fill with
 * @return none
 */
void ST7789_Fill_Color(uint16_t color)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0
 8000786:	4603      	mov	r3, r0
 8000788:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	ST7789_SetAddressWindow(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1);
 800078a:	23ef      	movs	r3, #239	; 0xef
 800078c:	22ef      	movs	r2, #239	; 0xef
 800078e:	2100      	movs	r1, #0
 8000790:	2000      	movs	r0, #0
 8000792:	f7ff fefb 	bl	800058c <ST7789_SetAddressWindow>
	ST7789_Select();
 8000796:	2200      	movs	r2, #0
 8000798:	2102      	movs	r1, #2
 800079a:	4816      	ldr	r0, [pc, #88]	; (80007f4 <ST7789_Fill_Color+0x74>)
 800079c:	f001 fb32 	bl	8001e04 <HAL_GPIO_WritePin>
			memset(disp_buf, color, sizeof(disp_buf));
			ST7789_WriteData(disp_buf, sizeof(disp_buf));
		}
	#else
		uint16_t j;
		for (i = 0; i < ST7789_WIDTH; i++)
 80007a0:	2300      	movs	r3, #0
 80007a2:	81fb      	strh	r3, [r7, #14]
 80007a4:	e019      	b.n	80007da <ST7789_Fill_Color+0x5a>
				for (j = 0; j < ST7789_HEIGHT; j++) {
 80007a6:	2300      	movs	r3, #0
 80007a8:	81bb      	strh	r3, [r7, #12]
 80007aa:	e010      	b.n	80007ce <ST7789_Fill_Color+0x4e>
					uint8_t data[] = {color >> 8, color & 0xFF};
 80007ac:	88fb      	ldrh	r3, [r7, #6]
 80007ae:	0a1b      	lsrs	r3, r3, #8
 80007b0:	b29b      	uxth	r3, r3
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	723b      	strb	r3, [r7, #8]
 80007b6:	88fb      	ldrh	r3, [r7, #6]
 80007b8:	b2db      	uxtb	r3, r3
 80007ba:	727b      	strb	r3, [r7, #9]
					ST7789_WriteData(data, sizeof(data));
 80007bc:	f107 0308 	add.w	r3, r7, #8
 80007c0:	2102      	movs	r1, #2
 80007c2:	4618      	mov	r0, r3
 80007c4:	f7ff fe58 	bl	8000478 <ST7789_WriteData>
				for (j = 0; j < ST7789_HEIGHT; j++) {
 80007c8:	89bb      	ldrh	r3, [r7, #12]
 80007ca:	3301      	adds	r3, #1
 80007cc:	81bb      	strh	r3, [r7, #12]
 80007ce:	89bb      	ldrh	r3, [r7, #12]
 80007d0:	2bef      	cmp	r3, #239	; 0xef
 80007d2:	d9eb      	bls.n	80007ac <ST7789_Fill_Color+0x2c>
		for (i = 0; i < ST7789_WIDTH; i++)
 80007d4:	89fb      	ldrh	r3, [r7, #14]
 80007d6:	3301      	adds	r3, #1
 80007d8:	81fb      	strh	r3, [r7, #14]
 80007da:	89fb      	ldrh	r3, [r7, #14]
 80007dc:	2bef      	cmp	r3, #239	; 0xef
 80007de:	d9e2      	bls.n	80007a6 <ST7789_Fill_Color+0x26>
				}
	#endif
	ST7789_UnSelect();
 80007e0:	2201      	movs	r2, #1
 80007e2:	2102      	movs	r1, #2
 80007e4:	4803      	ldr	r0, [pc, #12]	; (80007f4 <ST7789_Fill_Color+0x74>)
 80007e6:	f001 fb0d 	bl	8001e04 <HAL_GPIO_WritePin>
}
 80007ea:	bf00      	nop
 80007ec:	3710      	adds	r7, #16
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	40010c00 	.word	0x40010c00

080007f8 <ST7789_DrawPixel>:
 * @param x&y -> coordinate to Draw
 * @param color -> color of the Pixel
 * @return none
 */
void ST7789_DrawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b084      	sub	sp, #16
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	4603      	mov	r3, r0
 8000800:	80fb      	strh	r3, [r7, #6]
 8000802:	460b      	mov	r3, r1
 8000804:	80bb      	strh	r3, [r7, #4]
 8000806:	4613      	mov	r3, r2
 8000808:	807b      	strh	r3, [r7, #2]
	if ((x < 0) || (x >= ST7789_WIDTH) ||
 800080a:	88fb      	ldrh	r3, [r7, #6]
 800080c:	2bef      	cmp	r3, #239	; 0xef
 800080e:	d821      	bhi.n	8000854 <ST7789_DrawPixel+0x5c>
		 (y < 0) || (y >= ST7789_HEIGHT))	return;
 8000810:	88bb      	ldrh	r3, [r7, #4]
 8000812:	2bef      	cmp	r3, #239	; 0xef
 8000814:	d81e      	bhi.n	8000854 <ST7789_DrawPixel+0x5c>

	ST7789_SetAddressWindow(x, y, x, y);
 8000816:	88bb      	ldrh	r3, [r7, #4]
 8000818:	88fa      	ldrh	r2, [r7, #6]
 800081a:	88b9      	ldrh	r1, [r7, #4]
 800081c:	88f8      	ldrh	r0, [r7, #6]
 800081e:	f7ff feb5 	bl	800058c <ST7789_SetAddressWindow>
	uint8_t data[] = {color >> 8, color & 0xFF};
 8000822:	887b      	ldrh	r3, [r7, #2]
 8000824:	0a1b      	lsrs	r3, r3, #8
 8000826:	b29b      	uxth	r3, r3
 8000828:	b2db      	uxtb	r3, r3
 800082a:	733b      	strb	r3, [r7, #12]
 800082c:	887b      	ldrh	r3, [r7, #2]
 800082e:	b2db      	uxtb	r3, r3
 8000830:	737b      	strb	r3, [r7, #13]
	ST7789_Select();
 8000832:	2200      	movs	r2, #0
 8000834:	2102      	movs	r1, #2
 8000836:	4809      	ldr	r0, [pc, #36]	; (800085c <ST7789_DrawPixel+0x64>)
 8000838:	f001 fae4 	bl	8001e04 <HAL_GPIO_WritePin>
	ST7789_WriteData(data, sizeof(data));
 800083c:	f107 030c 	add.w	r3, r7, #12
 8000840:	2102      	movs	r1, #2
 8000842:	4618      	mov	r0, r3
 8000844:	f7ff fe18 	bl	8000478 <ST7789_WriteData>
	ST7789_UnSelect();
 8000848:	2201      	movs	r2, #1
 800084a:	2102      	movs	r1, #2
 800084c:	4803      	ldr	r0, [pc, #12]	; (800085c <ST7789_DrawPixel+0x64>)
 800084e:	f001 fad9 	bl	8001e04 <HAL_GPIO_WritePin>
 8000852:	e000      	b.n	8000856 <ST7789_DrawPixel+0x5e>
		 (y < 0) || (y >= ST7789_HEIGHT))	return;
 8000854:	bf00      	nop
}
 8000856:	3710      	adds	r7, #16
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	40010c00 	.word	0x40010c00

08000860 <ST7789_DrawLine>:
 * @param x2&y2 -> coordinate of the end point
 * @param color -> color of the line to Draw
 * @return none
 */
void ST7789_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1,
        uint16_t color) {
 8000860:	b590      	push	{r4, r7, lr}
 8000862:	b087      	sub	sp, #28
 8000864:	af00      	add	r7, sp, #0
 8000866:	4604      	mov	r4, r0
 8000868:	4608      	mov	r0, r1
 800086a:	4611      	mov	r1, r2
 800086c:	461a      	mov	r2, r3
 800086e:	4623      	mov	r3, r4
 8000870:	80fb      	strh	r3, [r7, #6]
 8000872:	4603      	mov	r3, r0
 8000874:	80bb      	strh	r3, [r7, #4]
 8000876:	460b      	mov	r3, r1
 8000878:	807b      	strh	r3, [r7, #2]
 800087a:	4613      	mov	r3, r2
 800087c:	803b      	strh	r3, [r7, #0]
	uint16_t swap;
    uint16_t steep = ABS(y1 - y0) > ABS(x1 - x0);
 800087e:	883a      	ldrh	r2, [r7, #0]
 8000880:	88bb      	ldrh	r3, [r7, #4]
 8000882:	1ad3      	subs	r3, r2, r3
 8000884:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000888:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800088c:	8879      	ldrh	r1, [r7, #2]
 800088e:	88fb      	ldrh	r3, [r7, #6]
 8000890:	1acb      	subs	r3, r1, r3
 8000892:	2b00      	cmp	r3, #0
 8000894:	bfb8      	it	lt
 8000896:	425b      	neglt	r3, r3
 8000898:	429a      	cmp	r2, r3
 800089a:	bfcc      	ite	gt
 800089c:	2301      	movgt	r3, #1
 800089e:	2300      	movle	r3, #0
 80008a0:	b2db      	uxtb	r3, r3
 80008a2:	827b      	strh	r3, [r7, #18]
    if (steep) {
 80008a4:	8a7b      	ldrh	r3, [r7, #18]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d00b      	beq.n	80008c2 <ST7789_DrawLine+0x62>
		swap = x0;
 80008aa:	88fb      	ldrh	r3, [r7, #6]
 80008ac:	823b      	strh	r3, [r7, #16]
		x0 = y0;
 80008ae:	88bb      	ldrh	r3, [r7, #4]
 80008b0:	80fb      	strh	r3, [r7, #6]
		y0 = swap;
 80008b2:	8a3b      	ldrh	r3, [r7, #16]
 80008b4:	80bb      	strh	r3, [r7, #4]

		swap = x1;
 80008b6:	887b      	ldrh	r3, [r7, #2]
 80008b8:	823b      	strh	r3, [r7, #16]
		x1 = y1;
 80008ba:	883b      	ldrh	r3, [r7, #0]
 80008bc:	807b      	strh	r3, [r7, #2]
		y1 = swap;
 80008be:	8a3b      	ldrh	r3, [r7, #16]
 80008c0:	803b      	strh	r3, [r7, #0]
        //_swap_int16_t(x0, y0);
        //_swap_int16_t(x1, y1);
    }

    if (x0 > x1) {
 80008c2:	88fa      	ldrh	r2, [r7, #6]
 80008c4:	887b      	ldrh	r3, [r7, #2]
 80008c6:	429a      	cmp	r2, r3
 80008c8:	d90b      	bls.n	80008e2 <ST7789_DrawLine+0x82>
		swap = x0;
 80008ca:	88fb      	ldrh	r3, [r7, #6]
 80008cc:	823b      	strh	r3, [r7, #16]
		x0 = x1;
 80008ce:	887b      	ldrh	r3, [r7, #2]
 80008d0:	80fb      	strh	r3, [r7, #6]
		x1 = swap;
 80008d2:	8a3b      	ldrh	r3, [r7, #16]
 80008d4:	807b      	strh	r3, [r7, #2]

		swap = y0;
 80008d6:	88bb      	ldrh	r3, [r7, #4]
 80008d8:	823b      	strh	r3, [r7, #16]
		y0 = y1;
 80008da:	883b      	ldrh	r3, [r7, #0]
 80008dc:	80bb      	strh	r3, [r7, #4]
		y1 = swap;
 80008de:	8a3b      	ldrh	r3, [r7, #16]
 80008e0:	803b      	strh	r3, [r7, #0]
        //_swap_int16_t(x0, x1);
        //_swap_int16_t(y0, y1);
    }

    int16_t dx, dy;
    dx = x1 - x0;
 80008e2:	887a      	ldrh	r2, [r7, #2]
 80008e4:	88fb      	ldrh	r3, [r7, #6]
 80008e6:	1ad3      	subs	r3, r2, r3
 80008e8:	b29b      	uxth	r3, r3
 80008ea:	81fb      	strh	r3, [r7, #14]
    dy = ABS(y1 - y0);
 80008ec:	883a      	ldrh	r2, [r7, #0]
 80008ee:	88bb      	ldrh	r3, [r7, #4]
 80008f0:	1ad3      	subs	r3, r2, r3
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	bfb8      	it	lt
 80008f6:	425b      	neglt	r3, r3
 80008f8:	81bb      	strh	r3, [r7, #12]

    int16_t err = dx / 2;
 80008fa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80008fe:	0fda      	lsrs	r2, r3, #31
 8000900:	4413      	add	r3, r2
 8000902:	105b      	asrs	r3, r3, #1
 8000904:	82fb      	strh	r3, [r7, #22]
    int16_t ystep;

    if (y0 < y1) {
 8000906:	88ba      	ldrh	r2, [r7, #4]
 8000908:	883b      	ldrh	r3, [r7, #0]
 800090a:	429a      	cmp	r2, r3
 800090c:	d202      	bcs.n	8000914 <ST7789_DrawLine+0xb4>
        ystep = 1;
 800090e:	2301      	movs	r3, #1
 8000910:	82bb      	strh	r3, [r7, #20]
 8000912:	e028      	b.n	8000966 <ST7789_DrawLine+0x106>
    } else {
        ystep = -1;
 8000914:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000918:	82bb      	strh	r3, [r7, #20]
    }

    for (; x0<=x1; x0++) {
 800091a:	e024      	b.n	8000966 <ST7789_DrawLine+0x106>
        if (steep) {
 800091c:	8a7b      	ldrh	r3, [r7, #18]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d006      	beq.n	8000930 <ST7789_DrawLine+0xd0>
            ST7789_DrawPixel(y0, x0, color);
 8000922:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000924:	88f9      	ldrh	r1, [r7, #6]
 8000926:	88bb      	ldrh	r3, [r7, #4]
 8000928:	4618      	mov	r0, r3
 800092a:	f7ff ff65 	bl	80007f8 <ST7789_DrawPixel>
 800092e:	e005      	b.n	800093c <ST7789_DrawLine+0xdc>
        } else {
            ST7789_DrawPixel(x0, y0, color);
 8000930:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000932:	88b9      	ldrh	r1, [r7, #4]
 8000934:	88fb      	ldrh	r3, [r7, #6]
 8000936:	4618      	mov	r0, r3
 8000938:	f7ff ff5e 	bl	80007f8 <ST7789_DrawPixel>
        }
        err -= dy;
 800093c:	8afa      	ldrh	r2, [r7, #22]
 800093e:	89bb      	ldrh	r3, [r7, #12]
 8000940:	1ad3      	subs	r3, r2, r3
 8000942:	b29b      	uxth	r3, r3
 8000944:	82fb      	strh	r3, [r7, #22]
        if (err < 0) {
 8000946:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800094a:	2b00      	cmp	r3, #0
 800094c:	da08      	bge.n	8000960 <ST7789_DrawLine+0x100>
            y0 += ystep;
 800094e:	8aba      	ldrh	r2, [r7, #20]
 8000950:	88bb      	ldrh	r3, [r7, #4]
 8000952:	4413      	add	r3, r2
 8000954:	80bb      	strh	r3, [r7, #4]
            err += dx;
 8000956:	8afa      	ldrh	r2, [r7, #22]
 8000958:	89fb      	ldrh	r3, [r7, #14]
 800095a:	4413      	add	r3, r2
 800095c:	b29b      	uxth	r3, r3
 800095e:	82fb      	strh	r3, [r7, #22]
    for (; x0<=x1; x0++) {
 8000960:	88fb      	ldrh	r3, [r7, #6]
 8000962:	3301      	adds	r3, #1
 8000964:	80fb      	strh	r3, [r7, #6]
 8000966:	88fa      	ldrh	r2, [r7, #6]
 8000968:	887b      	ldrh	r3, [r7, #2]
 800096a:	429a      	cmp	r2, r3
 800096c:	d9d6      	bls.n	800091c <ST7789_DrawLine+0xbc>
        }
    }
}
 800096e:	bf00      	nop
 8000970:	bf00      	nop
 8000972:	371c      	adds	r7, #28
 8000974:	46bd      	mov	sp, r7
 8000976:	bd90      	pop	{r4, r7, pc}

08000978 <ST7789_DrawRectangle>:
 * @param xi&yi -> 2 coordinates of 2 top points.
 * @param color -> color of the Rectangle line
 * @return none
 */
void ST7789_DrawRectangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color)
{
 8000978:	b590      	push	{r4, r7, lr}
 800097a:	b085      	sub	sp, #20
 800097c:	af02      	add	r7, sp, #8
 800097e:	4604      	mov	r4, r0
 8000980:	4608      	mov	r0, r1
 8000982:	4611      	mov	r1, r2
 8000984:	461a      	mov	r2, r3
 8000986:	4623      	mov	r3, r4
 8000988:	80fb      	strh	r3, [r7, #6]
 800098a:	4603      	mov	r3, r0
 800098c:	80bb      	strh	r3, [r7, #4]
 800098e:	460b      	mov	r3, r1
 8000990:	807b      	strh	r3, [r7, #2]
 8000992:	4613      	mov	r3, r2
 8000994:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 8000996:	2200      	movs	r2, #0
 8000998:	2102      	movs	r1, #2
 800099a:	4818      	ldr	r0, [pc, #96]	; (80009fc <ST7789_DrawRectangle+0x84>)
 800099c:	f001 fa32 	bl	8001e04 <HAL_GPIO_WritePin>
	ST7789_DrawLine(x1, y1, x2, y1, color);
 80009a0:	88bc      	ldrh	r4, [r7, #4]
 80009a2:	887a      	ldrh	r2, [r7, #2]
 80009a4:	88b9      	ldrh	r1, [r7, #4]
 80009a6:	88f8      	ldrh	r0, [r7, #6]
 80009a8:	8b3b      	ldrh	r3, [r7, #24]
 80009aa:	9300      	str	r3, [sp, #0]
 80009ac:	4623      	mov	r3, r4
 80009ae:	f7ff ff57 	bl	8000860 <ST7789_DrawLine>
	ST7789_DrawLine(x1, y1, x1, y2, color);
 80009b2:	883c      	ldrh	r4, [r7, #0]
 80009b4:	88fa      	ldrh	r2, [r7, #6]
 80009b6:	88b9      	ldrh	r1, [r7, #4]
 80009b8:	88f8      	ldrh	r0, [r7, #6]
 80009ba:	8b3b      	ldrh	r3, [r7, #24]
 80009bc:	9300      	str	r3, [sp, #0]
 80009be:	4623      	mov	r3, r4
 80009c0:	f7ff ff4e 	bl	8000860 <ST7789_DrawLine>
	ST7789_DrawLine(x1, y2, x2, y2, color);
 80009c4:	883c      	ldrh	r4, [r7, #0]
 80009c6:	887a      	ldrh	r2, [r7, #2]
 80009c8:	8839      	ldrh	r1, [r7, #0]
 80009ca:	88f8      	ldrh	r0, [r7, #6]
 80009cc:	8b3b      	ldrh	r3, [r7, #24]
 80009ce:	9300      	str	r3, [sp, #0]
 80009d0:	4623      	mov	r3, r4
 80009d2:	f7ff ff45 	bl	8000860 <ST7789_DrawLine>
	ST7789_DrawLine(x2, y1, x2, y2, color);
 80009d6:	883c      	ldrh	r4, [r7, #0]
 80009d8:	887a      	ldrh	r2, [r7, #2]
 80009da:	88b9      	ldrh	r1, [r7, #4]
 80009dc:	8878      	ldrh	r0, [r7, #2]
 80009de:	8b3b      	ldrh	r3, [r7, #24]
 80009e0:	9300      	str	r3, [sp, #0]
 80009e2:	4623      	mov	r3, r4
 80009e4:	f7ff ff3c 	bl	8000860 <ST7789_DrawLine>
	ST7789_UnSelect();
 80009e8:	2201      	movs	r2, #1
 80009ea:	2102      	movs	r1, #2
 80009ec:	4803      	ldr	r0, [pc, #12]	; (80009fc <ST7789_DrawRectangle+0x84>)
 80009ee:	f001 fa09 	bl	8001e04 <HAL_GPIO_WritePin>
}
 80009f2:	bf00      	nop
 80009f4:	370c      	adds	r7, #12
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd90      	pop	{r4, r7, pc}
 80009fa:	bf00      	nop
 80009fc:	40010c00 	.word	0x40010c00

08000a00 <ST7789_DrawCircle>:
 * @param r -> radius of circle
 * @param color -> color of circle line
 * @return  none
 */
void ST7789_DrawCircle(uint16_t x0, uint16_t y0, uint8_t r, uint16_t color)
{
 8000a00:	b590      	push	{r4, r7, lr}
 8000a02:	b087      	sub	sp, #28
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	4604      	mov	r4, r0
 8000a08:	4608      	mov	r0, r1
 8000a0a:	4611      	mov	r1, r2
 8000a0c:	461a      	mov	r2, r3
 8000a0e:	4623      	mov	r3, r4
 8000a10:	80fb      	strh	r3, [r7, #6]
 8000a12:	4603      	mov	r3, r0
 8000a14:	80bb      	strh	r3, [r7, #4]
 8000a16:	460b      	mov	r3, r1
 8000a18:	70fb      	strb	r3, [r7, #3]
 8000a1a:	4613      	mov	r3, r2
 8000a1c:	803b      	strh	r3, [r7, #0]
	int16_t f = 1 - r;
 8000a1e:	78fb      	ldrb	r3, [r7, #3]
 8000a20:	b29b      	uxth	r3, r3
 8000a22:	f1c3 0301 	rsb	r3, r3, #1
 8000a26:	b29b      	uxth	r3, r3
 8000a28:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8000a2e:	78fb      	ldrb	r3, [r7, #3]
 8000a30:	b29b      	uxth	r3, r3
 8000a32:	461a      	mov	r2, r3
 8000a34:	03d2      	lsls	r2, r2, #15
 8000a36:	1ad3      	subs	r3, r2, r3
 8000a38:	005b      	lsls	r3, r3, #1
 8000a3a:	b29b      	uxth	r3, r3
 8000a3c:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 8000a42:	78fb      	ldrb	r3, [r7, #3]
 8000a44:	81fb      	strh	r3, [r7, #14]

	ST7789_Select();
 8000a46:	2200      	movs	r2, #0
 8000a48:	2102      	movs	r1, #2
 8000a4a:	485f      	ldr	r0, [pc, #380]	; (8000bc8 <ST7789_DrawCircle+0x1c8>)
 8000a4c:	f001 f9da 	bl	8001e04 <HAL_GPIO_WritePin>
	ST7789_DrawPixel(x0, y0 + r, color);
 8000a50:	78fb      	ldrb	r3, [r7, #3]
 8000a52:	b29a      	uxth	r2, r3
 8000a54:	88bb      	ldrh	r3, [r7, #4]
 8000a56:	4413      	add	r3, r2
 8000a58:	b299      	uxth	r1, r3
 8000a5a:	883a      	ldrh	r2, [r7, #0]
 8000a5c:	88fb      	ldrh	r3, [r7, #6]
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f7ff feca 	bl	80007f8 <ST7789_DrawPixel>
	ST7789_DrawPixel(x0, y0 - r, color);
 8000a64:	78fb      	ldrb	r3, [r7, #3]
 8000a66:	b29b      	uxth	r3, r3
 8000a68:	88ba      	ldrh	r2, [r7, #4]
 8000a6a:	1ad3      	subs	r3, r2, r3
 8000a6c:	b299      	uxth	r1, r3
 8000a6e:	883a      	ldrh	r2, [r7, #0]
 8000a70:	88fb      	ldrh	r3, [r7, #6]
 8000a72:	4618      	mov	r0, r3
 8000a74:	f7ff fec0 	bl	80007f8 <ST7789_DrawPixel>
	ST7789_DrawPixel(x0 + r, y0, color);
 8000a78:	78fb      	ldrb	r3, [r7, #3]
 8000a7a:	b29a      	uxth	r2, r3
 8000a7c:	88fb      	ldrh	r3, [r7, #6]
 8000a7e:	4413      	add	r3, r2
 8000a80:	b29b      	uxth	r3, r3
 8000a82:	883a      	ldrh	r2, [r7, #0]
 8000a84:	88b9      	ldrh	r1, [r7, #4]
 8000a86:	4618      	mov	r0, r3
 8000a88:	f7ff feb6 	bl	80007f8 <ST7789_DrawPixel>
	ST7789_DrawPixel(x0 - r, y0, color);
 8000a8c:	78fb      	ldrb	r3, [r7, #3]
 8000a8e:	b29b      	uxth	r3, r3
 8000a90:	88fa      	ldrh	r2, [r7, #6]
 8000a92:	1ad3      	subs	r3, r2, r3
 8000a94:	b29b      	uxth	r3, r3
 8000a96:	883a      	ldrh	r2, [r7, #0]
 8000a98:	88b9      	ldrh	r1, [r7, #4]
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f7ff feac 	bl	80007f8 <ST7789_DrawPixel>

	while (x < y) {
 8000aa0:	e081      	b.n	8000ba6 <ST7789_DrawCircle+0x1a6>
		if (f >= 0) {
 8000aa2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	db0e      	blt.n	8000ac8 <ST7789_DrawCircle+0xc8>
			y--;
 8000aaa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000aae:	b29b      	uxth	r3, r3
 8000ab0:	3b01      	subs	r3, #1
 8000ab2:	b29b      	uxth	r3, r3
 8000ab4:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 8000ab6:	8a7b      	ldrh	r3, [r7, #18]
 8000ab8:	3302      	adds	r3, #2
 8000aba:	b29b      	uxth	r3, r3
 8000abc:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 8000abe:	8afa      	ldrh	r2, [r7, #22]
 8000ac0:	8a7b      	ldrh	r3, [r7, #18]
 8000ac2:	4413      	add	r3, r2
 8000ac4:	b29b      	uxth	r3, r3
 8000ac6:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 8000ac8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000acc:	b29b      	uxth	r3, r3
 8000ace:	3301      	adds	r3, #1
 8000ad0:	b29b      	uxth	r3, r3
 8000ad2:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 8000ad4:	8abb      	ldrh	r3, [r7, #20]
 8000ad6:	3302      	adds	r3, #2
 8000ad8:	b29b      	uxth	r3, r3
 8000ada:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 8000adc:	8afa      	ldrh	r2, [r7, #22]
 8000ade:	8abb      	ldrh	r3, [r7, #20]
 8000ae0:	4413      	add	r3, r2
 8000ae2:	b29b      	uxth	r3, r3
 8000ae4:	82fb      	strh	r3, [r7, #22]

		ST7789_DrawPixel(x0 + x, y0 + y, color);
 8000ae6:	8a3a      	ldrh	r2, [r7, #16]
 8000ae8:	88fb      	ldrh	r3, [r7, #6]
 8000aea:	4413      	add	r3, r2
 8000aec:	b298      	uxth	r0, r3
 8000aee:	89fa      	ldrh	r2, [r7, #14]
 8000af0:	88bb      	ldrh	r3, [r7, #4]
 8000af2:	4413      	add	r3, r2
 8000af4:	b29b      	uxth	r3, r3
 8000af6:	883a      	ldrh	r2, [r7, #0]
 8000af8:	4619      	mov	r1, r3
 8000afa:	f7ff fe7d 	bl	80007f8 <ST7789_DrawPixel>
		ST7789_DrawPixel(x0 - x, y0 + y, color);
 8000afe:	8a3b      	ldrh	r3, [r7, #16]
 8000b00:	88fa      	ldrh	r2, [r7, #6]
 8000b02:	1ad3      	subs	r3, r2, r3
 8000b04:	b298      	uxth	r0, r3
 8000b06:	89fa      	ldrh	r2, [r7, #14]
 8000b08:	88bb      	ldrh	r3, [r7, #4]
 8000b0a:	4413      	add	r3, r2
 8000b0c:	b29b      	uxth	r3, r3
 8000b0e:	883a      	ldrh	r2, [r7, #0]
 8000b10:	4619      	mov	r1, r3
 8000b12:	f7ff fe71 	bl	80007f8 <ST7789_DrawPixel>
		ST7789_DrawPixel(x0 + x, y0 - y, color);
 8000b16:	8a3a      	ldrh	r2, [r7, #16]
 8000b18:	88fb      	ldrh	r3, [r7, #6]
 8000b1a:	4413      	add	r3, r2
 8000b1c:	b298      	uxth	r0, r3
 8000b1e:	89fb      	ldrh	r3, [r7, #14]
 8000b20:	88ba      	ldrh	r2, [r7, #4]
 8000b22:	1ad3      	subs	r3, r2, r3
 8000b24:	b29b      	uxth	r3, r3
 8000b26:	883a      	ldrh	r2, [r7, #0]
 8000b28:	4619      	mov	r1, r3
 8000b2a:	f7ff fe65 	bl	80007f8 <ST7789_DrawPixel>
		ST7789_DrawPixel(x0 - x, y0 - y, color);
 8000b2e:	8a3b      	ldrh	r3, [r7, #16]
 8000b30:	88fa      	ldrh	r2, [r7, #6]
 8000b32:	1ad3      	subs	r3, r2, r3
 8000b34:	b298      	uxth	r0, r3
 8000b36:	89fb      	ldrh	r3, [r7, #14]
 8000b38:	88ba      	ldrh	r2, [r7, #4]
 8000b3a:	1ad3      	subs	r3, r2, r3
 8000b3c:	b29b      	uxth	r3, r3
 8000b3e:	883a      	ldrh	r2, [r7, #0]
 8000b40:	4619      	mov	r1, r3
 8000b42:	f7ff fe59 	bl	80007f8 <ST7789_DrawPixel>

		ST7789_DrawPixel(x0 + y, y0 + x, color);
 8000b46:	89fa      	ldrh	r2, [r7, #14]
 8000b48:	88fb      	ldrh	r3, [r7, #6]
 8000b4a:	4413      	add	r3, r2
 8000b4c:	b298      	uxth	r0, r3
 8000b4e:	8a3a      	ldrh	r2, [r7, #16]
 8000b50:	88bb      	ldrh	r3, [r7, #4]
 8000b52:	4413      	add	r3, r2
 8000b54:	b29b      	uxth	r3, r3
 8000b56:	883a      	ldrh	r2, [r7, #0]
 8000b58:	4619      	mov	r1, r3
 8000b5a:	f7ff fe4d 	bl	80007f8 <ST7789_DrawPixel>
		ST7789_DrawPixel(x0 - y, y0 + x, color);
 8000b5e:	89fb      	ldrh	r3, [r7, #14]
 8000b60:	88fa      	ldrh	r2, [r7, #6]
 8000b62:	1ad3      	subs	r3, r2, r3
 8000b64:	b298      	uxth	r0, r3
 8000b66:	8a3a      	ldrh	r2, [r7, #16]
 8000b68:	88bb      	ldrh	r3, [r7, #4]
 8000b6a:	4413      	add	r3, r2
 8000b6c:	b29b      	uxth	r3, r3
 8000b6e:	883a      	ldrh	r2, [r7, #0]
 8000b70:	4619      	mov	r1, r3
 8000b72:	f7ff fe41 	bl	80007f8 <ST7789_DrawPixel>
		ST7789_DrawPixel(x0 + y, y0 - x, color);
 8000b76:	89fa      	ldrh	r2, [r7, #14]
 8000b78:	88fb      	ldrh	r3, [r7, #6]
 8000b7a:	4413      	add	r3, r2
 8000b7c:	b298      	uxth	r0, r3
 8000b7e:	8a3b      	ldrh	r3, [r7, #16]
 8000b80:	88ba      	ldrh	r2, [r7, #4]
 8000b82:	1ad3      	subs	r3, r2, r3
 8000b84:	b29b      	uxth	r3, r3
 8000b86:	883a      	ldrh	r2, [r7, #0]
 8000b88:	4619      	mov	r1, r3
 8000b8a:	f7ff fe35 	bl	80007f8 <ST7789_DrawPixel>
		ST7789_DrawPixel(x0 - y, y0 - x, color);
 8000b8e:	89fb      	ldrh	r3, [r7, #14]
 8000b90:	88fa      	ldrh	r2, [r7, #6]
 8000b92:	1ad3      	subs	r3, r2, r3
 8000b94:	b298      	uxth	r0, r3
 8000b96:	8a3b      	ldrh	r3, [r7, #16]
 8000b98:	88ba      	ldrh	r2, [r7, #4]
 8000b9a:	1ad3      	subs	r3, r2, r3
 8000b9c:	b29b      	uxth	r3, r3
 8000b9e:	883a      	ldrh	r2, [r7, #0]
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	f7ff fe29 	bl	80007f8 <ST7789_DrawPixel>
	while (x < y) {
 8000ba6:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000baa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000bae:	429a      	cmp	r2, r3
 8000bb0:	f6ff af77 	blt.w	8000aa2 <ST7789_DrawCircle+0xa2>
	}
	ST7789_UnSelect();
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	2102      	movs	r1, #2
 8000bb8:	4803      	ldr	r0, [pc, #12]	; (8000bc8 <ST7789_DrawCircle+0x1c8>)
 8000bba:	f001 f923 	bl	8001e04 <HAL_GPIO_WritePin>
}
 8000bbe:	bf00      	nop
 8000bc0:	371c      	adds	r7, #28
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd90      	pop	{r4, r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40010c00 	.word	0x40010c00

08000bcc <ST7789_DrawImage>:
 * @param w&h -> width & height of the Image to Draw
 * @param data -> pointer of the Image array
 * @return none
 */
void ST7789_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t *data)
{
 8000bcc:	b590      	push	{r4, r7, lr}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4604      	mov	r4, r0
 8000bd4:	4608      	mov	r0, r1
 8000bd6:	4611      	mov	r1, r2
 8000bd8:	461a      	mov	r2, r3
 8000bda:	4623      	mov	r3, r4
 8000bdc:	80fb      	strh	r3, [r7, #6]
 8000bde:	4603      	mov	r3, r0
 8000be0:	80bb      	strh	r3, [r7, #4]
 8000be2:	460b      	mov	r3, r1
 8000be4:	807b      	strh	r3, [r7, #2]
 8000be6:	4613      	mov	r3, r2
 8000be8:	803b      	strh	r3, [r7, #0]
	if ((x >= ST7789_WIDTH) || (y >= ST7789_HEIGHT))
 8000bea:	88fb      	ldrh	r3, [r7, #6]
 8000bec:	2bef      	cmp	r3, #239	; 0xef
 8000bee:	d831      	bhi.n	8000c54 <ST7789_DrawImage+0x88>
 8000bf0:	88bb      	ldrh	r3, [r7, #4]
 8000bf2:	2bef      	cmp	r3, #239	; 0xef
 8000bf4:	d82e      	bhi.n	8000c54 <ST7789_DrawImage+0x88>
		return;
	if ((x + w - 1) >= ST7789_WIDTH)
 8000bf6:	88fa      	ldrh	r2, [r7, #6]
 8000bf8:	887b      	ldrh	r3, [r7, #2]
 8000bfa:	4413      	add	r3, r2
 8000bfc:	2bf0      	cmp	r3, #240	; 0xf0
 8000bfe:	dc2b      	bgt.n	8000c58 <ST7789_DrawImage+0x8c>
		return;
	if ((y + h - 1) >= ST7789_HEIGHT)
 8000c00:	88ba      	ldrh	r2, [r7, #4]
 8000c02:	883b      	ldrh	r3, [r7, #0]
 8000c04:	4413      	add	r3, r2
 8000c06:	2bf0      	cmp	r3, #240	; 0xf0
 8000c08:	dc28      	bgt.n	8000c5c <ST7789_DrawImage+0x90>
		return;

	ST7789_Select();
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	2102      	movs	r1, #2
 8000c0e:	4815      	ldr	r0, [pc, #84]	; (8000c64 <ST7789_DrawImage+0x98>)
 8000c10:	f001 f8f8 	bl	8001e04 <HAL_GPIO_WritePin>
	ST7789_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 8000c14:	88fa      	ldrh	r2, [r7, #6]
 8000c16:	887b      	ldrh	r3, [r7, #2]
 8000c18:	4413      	add	r3, r2
 8000c1a:	b29b      	uxth	r3, r3
 8000c1c:	3b01      	subs	r3, #1
 8000c1e:	b29c      	uxth	r4, r3
 8000c20:	88ba      	ldrh	r2, [r7, #4]
 8000c22:	883b      	ldrh	r3, [r7, #0]
 8000c24:	4413      	add	r3, r2
 8000c26:	b29b      	uxth	r3, r3
 8000c28:	3b01      	subs	r3, #1
 8000c2a:	b29b      	uxth	r3, r3
 8000c2c:	88b9      	ldrh	r1, [r7, #4]
 8000c2e:	88f8      	ldrh	r0, [r7, #6]
 8000c30:	4622      	mov	r2, r4
 8000c32:	f7ff fcab 	bl	800058c <ST7789_SetAddressWindow>
	ST7789_WriteData((uint8_t *)data, sizeof(uint16_t) * w * h);
 8000c36:	887b      	ldrh	r3, [r7, #2]
 8000c38:	883a      	ldrh	r2, [r7, #0]
 8000c3a:	fb02 f303 	mul.w	r3, r2, r3
 8000c3e:	005b      	lsls	r3, r3, #1
 8000c40:	4619      	mov	r1, r3
 8000c42:	69b8      	ldr	r0, [r7, #24]
 8000c44:	f7ff fc18 	bl	8000478 <ST7789_WriteData>
	ST7789_UnSelect();
 8000c48:	2201      	movs	r2, #1
 8000c4a:	2102      	movs	r1, #2
 8000c4c:	4805      	ldr	r0, [pc, #20]	; (8000c64 <ST7789_DrawImage+0x98>)
 8000c4e:	f001 f8d9 	bl	8001e04 <HAL_GPIO_WritePin>
 8000c52:	e004      	b.n	8000c5e <ST7789_DrawImage+0x92>
		return;
 8000c54:	bf00      	nop
 8000c56:	e002      	b.n	8000c5e <ST7789_DrawImage+0x92>
		return;
 8000c58:	bf00      	nop
 8000c5a:	e000      	b.n	8000c5e <ST7789_DrawImage+0x92>
		return;
 8000c5c:	bf00      	nop
}
 8000c5e:	370c      	adds	r7, #12
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd90      	pop	{r4, r7, pc}
 8000c64:	40010c00 	.word	0x40010c00

08000c68 <ST7789_WriteChar>:
 * @param color -> color of the char
 * @param bgcolor -> background color of the char
 * @return  none
 */
void ST7789_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8000c68:	b082      	sub	sp, #8
 8000c6a:	b590      	push	{r4, r7, lr}
 8000c6c:	b089      	sub	sp, #36	; 0x24
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	637b      	str	r3, [r7, #52]	; 0x34
 8000c72:	4603      	mov	r3, r0
 8000c74:	80fb      	strh	r3, [r7, #6]
 8000c76:	460b      	mov	r3, r1
 8000c78:	80bb      	strh	r3, [r7, #4]
 8000c7a:	4613      	mov	r3, r2
 8000c7c:	70fb      	strb	r3, [r7, #3]
	uint32_t i, b, j;
	ST7789_Select();
 8000c7e:	2200      	movs	r2, #0
 8000c80:	2102      	movs	r1, #2
 8000c82:	4838      	ldr	r0, [pc, #224]	; (8000d64 <ST7789_WriteChar+0xfc>)
 8000c84:	f001 f8be 	bl	8001e04 <HAL_GPIO_WritePin>
	ST7789_SetAddressWindow(x, y, x + font.width - 1, y + font.height - 1);
 8000c88:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000c8c:	b29a      	uxth	r2, r3
 8000c8e:	88fb      	ldrh	r3, [r7, #6]
 8000c90:	4413      	add	r3, r2
 8000c92:	b29b      	uxth	r3, r3
 8000c94:	3b01      	subs	r3, #1
 8000c96:	b29c      	uxth	r4, r3
 8000c98:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000c9c:	b29a      	uxth	r2, r3
 8000c9e:	88bb      	ldrh	r3, [r7, #4]
 8000ca0:	4413      	add	r3, r2
 8000ca2:	b29b      	uxth	r3, r3
 8000ca4:	3b01      	subs	r3, #1
 8000ca6:	b29b      	uxth	r3, r3
 8000ca8:	88b9      	ldrh	r1, [r7, #4]
 8000caa:	88f8      	ldrh	r0, [r7, #6]
 8000cac:	4622      	mov	r2, r4
 8000cae:	f7ff fc6d 	bl	800058c <ST7789_SetAddressWindow>

	for (i = 0; i < font.height; i++) {
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	61fb      	str	r3, [r7, #28]
 8000cb6:	e043      	b.n	8000d40 <ST7789_WriteChar+0xd8>
		b = font.data[(ch - 32) * font.height + i];
 8000cb8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000cba:	78fb      	ldrb	r3, [r7, #3]
 8000cbc:	3b20      	subs	r3, #32
 8000cbe:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8000cc2:	fb01 f303 	mul.w	r3, r1, r3
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	69fb      	ldr	r3, [r7, #28]
 8000cca:	440b      	add	r3, r1
 8000ccc:	005b      	lsls	r3, r3, #1
 8000cce:	4413      	add	r3, r2
 8000cd0:	881b      	ldrh	r3, [r3, #0]
 8000cd2:	617b      	str	r3, [r7, #20]
		for (j = 0; j < font.width; j++) {
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	61bb      	str	r3, [r7, #24]
 8000cd8:	e029      	b.n	8000d2e <ST7789_WriteChar+0xc6>
			if ((b << j) & 0x8000) {
 8000cda:	697a      	ldr	r2, [r7, #20]
 8000cdc:	69bb      	ldr	r3, [r7, #24]
 8000cde:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d00e      	beq.n	8000d08 <ST7789_WriteChar+0xa0>
				uint8_t data[] = {color >> 8, color & 0xFF};
 8000cea:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000cec:	0a1b      	lsrs	r3, r3, #8
 8000cee:	b29b      	uxth	r3, r3
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	743b      	strb	r3, [r7, #16]
 8000cf4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	747b      	strb	r3, [r7, #17]
				ST7789_WriteData(data, sizeof(data));
 8000cfa:	f107 0310 	add.w	r3, r7, #16
 8000cfe:	2102      	movs	r1, #2
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff fbb9 	bl	8000478 <ST7789_WriteData>
 8000d06:	e00f      	b.n	8000d28 <ST7789_WriteChar+0xc0>
			}
			else {
				uint8_t data[] = {bgcolor >> 8, bgcolor & 0xFF};
 8000d08:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000d0c:	0a1b      	lsrs	r3, r3, #8
 8000d0e:	b29b      	uxth	r3, r3
 8000d10:	b2db      	uxtb	r3, r3
 8000d12:	733b      	strb	r3, [r7, #12]
 8000d14:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	737b      	strb	r3, [r7, #13]
				ST7789_WriteData(data, sizeof(data));
 8000d1c:	f107 030c 	add.w	r3, r7, #12
 8000d20:	2102      	movs	r1, #2
 8000d22:	4618      	mov	r0, r3
 8000d24:	f7ff fba8 	bl	8000478 <ST7789_WriteData>
		for (j = 0; j < font.width; j++) {
 8000d28:	69bb      	ldr	r3, [r7, #24]
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	61bb      	str	r3, [r7, #24]
 8000d2e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000d32:	461a      	mov	r2, r3
 8000d34:	69bb      	ldr	r3, [r7, #24]
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d3cf      	bcc.n	8000cda <ST7789_WriteChar+0x72>
	for (i = 0; i < font.height; i++) {
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	61fb      	str	r3, [r7, #28]
 8000d40:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000d44:	461a      	mov	r2, r3
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	d3b5      	bcc.n	8000cb8 <ST7789_WriteChar+0x50>
			}
		}
	}
	ST7789_UnSelect();
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	2102      	movs	r1, #2
 8000d50:	4804      	ldr	r0, [pc, #16]	; (8000d64 <ST7789_WriteChar+0xfc>)
 8000d52:	f001 f857 	bl	8001e04 <HAL_GPIO_WritePin>
}
 8000d56:	bf00      	nop
 8000d58:	3724      	adds	r7, #36	; 0x24
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000d60:	b002      	add	sp, #8
 8000d62:	4770      	bx	lr
 8000d64:	40010c00 	.word	0x40010c00

08000d68 <ST7789_WriteString>:
 * @param color -> color of the string
 * @param bgcolor -> background color of the string
 * @return  none
 */
void ST7789_WriteString(uint16_t x, uint16_t y, const char *str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8000d68:	b082      	sub	sp, #8
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b086      	sub	sp, #24
 8000d6e:	af04      	add	r7, sp, #16
 8000d70:	603a      	str	r2, [r7, #0]
 8000d72:	617b      	str	r3, [r7, #20]
 8000d74:	4603      	mov	r3, r0
 8000d76:	80fb      	strh	r3, [r7, #6]
 8000d78:	460b      	mov	r3, r1
 8000d7a:	80bb      	strh	r3, [r7, #4]
	ST7789_Select();
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	2102      	movs	r1, #2
 8000d80:	4821      	ldr	r0, [pc, #132]	; (8000e08 <ST7789_WriteString+0xa0>)
 8000d82:	f001 f83f 	bl	8001e04 <HAL_GPIO_WritePin>
	while (*str) {
 8000d86:	e02d      	b.n	8000de4 <ST7789_WriteString+0x7c>
		if (x + font.width >= ST7789_WIDTH) {
 8000d88:	88fb      	ldrh	r3, [r7, #6]
 8000d8a:	7d3a      	ldrb	r2, [r7, #20]
 8000d8c:	4413      	add	r3, r2
 8000d8e:	2bef      	cmp	r3, #239	; 0xef
 8000d90:	dd13      	ble.n	8000dba <ST7789_WriteString+0x52>
			x = 0;
 8000d92:	2300      	movs	r3, #0
 8000d94:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 8000d96:	7d7b      	ldrb	r3, [r7, #21]
 8000d98:	b29a      	uxth	r2, r3
 8000d9a:	88bb      	ldrh	r3, [r7, #4]
 8000d9c:	4413      	add	r3, r2
 8000d9e:	80bb      	strh	r3, [r7, #4]
			if (y + font.height >= ST7789_HEIGHT) {
 8000da0:	88bb      	ldrh	r3, [r7, #4]
 8000da2:	7d7a      	ldrb	r2, [r7, #21]
 8000da4:	4413      	add	r3, r2
 8000da6:	2bef      	cmp	r3, #239	; 0xef
 8000da8:	dc21      	bgt.n	8000dee <ST7789_WriteString+0x86>
				break;
			}

			if (*str == ' ') {
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	2b20      	cmp	r3, #32
 8000db0:	d103      	bne.n	8000dba <ST7789_WriteString+0x52>
				// skip spaces in the beginning of the new line
				str++;
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	3301      	adds	r3, #1
 8000db6:	603b      	str	r3, [r7, #0]
				continue;
 8000db8:	e014      	b.n	8000de4 <ST7789_WriteString+0x7c>
			}
		}
		ST7789_WriteChar(x, y, *str, font, color, bgcolor);
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	781a      	ldrb	r2, [r3, #0]
 8000dbe:	88b9      	ldrh	r1, [r7, #4]
 8000dc0:	88f8      	ldrh	r0, [r7, #6]
 8000dc2:	8c3b      	ldrh	r3, [r7, #32]
 8000dc4:	9302      	str	r3, [sp, #8]
 8000dc6:	8bbb      	ldrh	r3, [r7, #28]
 8000dc8:	9301      	str	r3, [sp, #4]
 8000dca:	69bb      	ldr	r3, [r7, #24]
 8000dcc:	9300      	str	r3, [sp, #0]
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	f7ff ff4a 	bl	8000c68 <ST7789_WriteChar>
		x += font.width;
 8000dd4:	7d3b      	ldrb	r3, [r7, #20]
 8000dd6:	b29a      	uxth	r2, r3
 8000dd8:	88fb      	ldrh	r3, [r7, #6]
 8000dda:	4413      	add	r3, r2
 8000ddc:	80fb      	strh	r3, [r7, #6]
		str++;
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	3301      	adds	r3, #1
 8000de2:	603b      	str	r3, [r7, #0]
	while (*str) {
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d1cd      	bne.n	8000d88 <ST7789_WriteString+0x20>
 8000dec:	e000      	b.n	8000df0 <ST7789_WriteString+0x88>
				break;
 8000dee:	bf00      	nop
	}
	ST7789_UnSelect();
 8000df0:	2201      	movs	r2, #1
 8000df2:	2102      	movs	r1, #2
 8000df4:	4804      	ldr	r0, [pc, #16]	; (8000e08 <ST7789_WriteString+0xa0>)
 8000df6:	f001 f805 	bl	8001e04 <HAL_GPIO_WritePin>
}
 8000dfa:	bf00      	nop
 8000dfc:	3708      	adds	r7, #8
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e04:	b002      	add	sp, #8
 8000e06:	4770      	bx	lr
 8000e08:	40010c00 	.word	0x40010c00

08000e0c <ST7789_DrawFilledRectangle>:
 * @param w&h -> width & height of the Rectangle
 * @param color -> color of the Rectangle
 * @return  none
 */
void ST7789_DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8000e0c:	b590      	push	{r4, r7, lr}
 8000e0e:	b087      	sub	sp, #28
 8000e10:	af02      	add	r7, sp, #8
 8000e12:	4604      	mov	r4, r0
 8000e14:	4608      	mov	r0, r1
 8000e16:	4611      	mov	r1, r2
 8000e18:	461a      	mov	r2, r3
 8000e1a:	4623      	mov	r3, r4
 8000e1c:	80fb      	strh	r3, [r7, #6]
 8000e1e:	4603      	mov	r3, r0
 8000e20:	80bb      	strh	r3, [r7, #4]
 8000e22:	460b      	mov	r3, r1
 8000e24:	807b      	strh	r3, [r7, #2]
 8000e26:	4613      	mov	r3, r2
 8000e28:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	2102      	movs	r1, #2
 8000e2e:	4822      	ldr	r0, [pc, #136]	; (8000eb8 <ST7789_DrawFilledRectangle+0xac>)
 8000e30:	f000 ffe8 	bl	8001e04 <HAL_GPIO_WritePin>
	uint8_t i;

	/* Check input parameters */
	if (x >= ST7789_WIDTH ||
 8000e34:	88fb      	ldrh	r3, [r7, #6]
 8000e36:	2bef      	cmp	r3, #239	; 0xef
 8000e38:	d83a      	bhi.n	8000eb0 <ST7789_DrawFilledRectangle+0xa4>
 8000e3a:	88bb      	ldrh	r3, [r7, #4]
 8000e3c:	2bef      	cmp	r3, #239	; 0xef
 8000e3e:	d837      	bhi.n	8000eb0 <ST7789_DrawFilledRectangle+0xa4>
		/* Return error */
		return;
	}

	/* Check width and height */
	if ((x + w) >= ST7789_WIDTH) {
 8000e40:	88fa      	ldrh	r2, [r7, #6]
 8000e42:	887b      	ldrh	r3, [r7, #2]
 8000e44:	4413      	add	r3, r2
 8000e46:	2bef      	cmp	r3, #239	; 0xef
 8000e48:	dd03      	ble.n	8000e52 <ST7789_DrawFilledRectangle+0x46>
		w = ST7789_WIDTH - x;
 8000e4a:	88fb      	ldrh	r3, [r7, #6]
 8000e4c:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8000e50:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= ST7789_HEIGHT) {
 8000e52:	88ba      	ldrh	r2, [r7, #4]
 8000e54:	883b      	ldrh	r3, [r7, #0]
 8000e56:	4413      	add	r3, r2
 8000e58:	2bef      	cmp	r3, #239	; 0xef
 8000e5a:	dd03      	ble.n	8000e64 <ST7789_DrawFilledRectangle+0x58>
		h = ST7789_HEIGHT - y;
 8000e5c:	88bb      	ldrh	r3, [r7, #4]
 8000e5e:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8000e62:	803b      	strh	r3, [r7, #0]
	}

	/* Draw lines */
	for (i = 0; i <= h; i++) {
 8000e64:	2300      	movs	r3, #0
 8000e66:	73fb      	strb	r3, [r7, #15]
 8000e68:	e017      	b.n	8000e9a <ST7789_DrawFilledRectangle+0x8e>
		/* Draw lines */
		ST7789_DrawLine(x, y + i, x + w, y + i, color);
 8000e6a:	7bfb      	ldrb	r3, [r7, #15]
 8000e6c:	b29a      	uxth	r2, r3
 8000e6e:	88bb      	ldrh	r3, [r7, #4]
 8000e70:	4413      	add	r3, r2
 8000e72:	b299      	uxth	r1, r3
 8000e74:	88fa      	ldrh	r2, [r7, #6]
 8000e76:	887b      	ldrh	r3, [r7, #2]
 8000e78:	4413      	add	r3, r2
 8000e7a:	b29c      	uxth	r4, r3
 8000e7c:	7bfb      	ldrb	r3, [r7, #15]
 8000e7e:	b29a      	uxth	r2, r3
 8000e80:	88bb      	ldrh	r3, [r7, #4]
 8000e82:	4413      	add	r3, r2
 8000e84:	b29a      	uxth	r2, r3
 8000e86:	88f8      	ldrh	r0, [r7, #6]
 8000e88:	8c3b      	ldrh	r3, [r7, #32]
 8000e8a:	9300      	str	r3, [sp, #0]
 8000e8c:	4613      	mov	r3, r2
 8000e8e:	4622      	mov	r2, r4
 8000e90:	f7ff fce6 	bl	8000860 <ST7789_DrawLine>
	for (i = 0; i <= h; i++) {
 8000e94:	7bfb      	ldrb	r3, [r7, #15]
 8000e96:	3301      	adds	r3, #1
 8000e98:	73fb      	strb	r3, [r7, #15]
 8000e9a:	7bfb      	ldrb	r3, [r7, #15]
 8000e9c:	b29b      	uxth	r3, r3
 8000e9e:	883a      	ldrh	r2, [r7, #0]
 8000ea0:	429a      	cmp	r2, r3
 8000ea2:	d2e2      	bcs.n	8000e6a <ST7789_DrawFilledRectangle+0x5e>
	}
	ST7789_UnSelect();
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	2102      	movs	r1, #2
 8000ea8:	4803      	ldr	r0, [pc, #12]	; (8000eb8 <ST7789_DrawFilledRectangle+0xac>)
 8000eaa:	f000 ffab 	bl	8001e04 <HAL_GPIO_WritePin>
 8000eae:	e000      	b.n	8000eb2 <ST7789_DrawFilledRectangle+0xa6>
		return;
 8000eb0:	bf00      	nop
}
 8000eb2:	3714      	adds	r7, #20
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd90      	pop	{r4, r7, pc}
 8000eb8:	40010c00 	.word	0x40010c00

08000ebc <ST7789_DrawTriangle>:
 * @param  xi&yi -> 3 coordinates of 3 top points.
 * @param color ->color of the lines
 * @return  none
 */
void ST7789_DrawTriangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t x3, uint16_t y3, uint16_t color)
{
 8000ebc:	b590      	push	{r4, r7, lr}
 8000ebe:	b085      	sub	sp, #20
 8000ec0:	af02      	add	r7, sp, #8
 8000ec2:	4604      	mov	r4, r0
 8000ec4:	4608      	mov	r0, r1
 8000ec6:	4611      	mov	r1, r2
 8000ec8:	461a      	mov	r2, r3
 8000eca:	4623      	mov	r3, r4
 8000ecc:	80fb      	strh	r3, [r7, #6]
 8000ece:	4603      	mov	r3, r0
 8000ed0:	80bb      	strh	r3, [r7, #4]
 8000ed2:	460b      	mov	r3, r1
 8000ed4:	807b      	strh	r3, [r7, #2]
 8000ed6:	4613      	mov	r3, r2
 8000ed8:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 8000eda:	2200      	movs	r2, #0
 8000edc:	2102      	movs	r1, #2
 8000ede:	4813      	ldr	r0, [pc, #76]	; (8000f2c <ST7789_DrawTriangle+0x70>)
 8000ee0:	f000 ff90 	bl	8001e04 <HAL_GPIO_WritePin>
	/* Draw lines */
	ST7789_DrawLine(x1, y1, x2, y2, color);
 8000ee4:	883c      	ldrh	r4, [r7, #0]
 8000ee6:	887a      	ldrh	r2, [r7, #2]
 8000ee8:	88b9      	ldrh	r1, [r7, #4]
 8000eea:	88f8      	ldrh	r0, [r7, #6]
 8000eec:	8c3b      	ldrh	r3, [r7, #32]
 8000eee:	9300      	str	r3, [sp, #0]
 8000ef0:	4623      	mov	r3, r4
 8000ef2:	f7ff fcb5 	bl	8000860 <ST7789_DrawLine>
	ST7789_DrawLine(x2, y2, x3, y3, color);
 8000ef6:	8bbc      	ldrh	r4, [r7, #28]
 8000ef8:	8b3a      	ldrh	r2, [r7, #24]
 8000efa:	8839      	ldrh	r1, [r7, #0]
 8000efc:	8878      	ldrh	r0, [r7, #2]
 8000efe:	8c3b      	ldrh	r3, [r7, #32]
 8000f00:	9300      	str	r3, [sp, #0]
 8000f02:	4623      	mov	r3, r4
 8000f04:	f7ff fcac 	bl	8000860 <ST7789_DrawLine>
	ST7789_DrawLine(x3, y3, x1, y1, color);
 8000f08:	88bc      	ldrh	r4, [r7, #4]
 8000f0a:	88fa      	ldrh	r2, [r7, #6]
 8000f0c:	8bb9      	ldrh	r1, [r7, #28]
 8000f0e:	8b38      	ldrh	r0, [r7, #24]
 8000f10:	8c3b      	ldrh	r3, [r7, #32]
 8000f12:	9300      	str	r3, [sp, #0]
 8000f14:	4623      	mov	r3, r4
 8000f16:	f7ff fca3 	bl	8000860 <ST7789_DrawLine>
	ST7789_UnSelect();
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	2102      	movs	r1, #2
 8000f1e:	4803      	ldr	r0, [pc, #12]	; (8000f2c <ST7789_DrawTriangle+0x70>)
 8000f20:	f000 ff70 	bl	8001e04 <HAL_GPIO_WritePin>
}
 8000f24:	bf00      	nop
 8000f26:	370c      	adds	r7, #12
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd90      	pop	{r4, r7, pc}
 8000f2c:	40010c00 	.word	0x40010c00

08000f30 <ST7789_DrawFilledTriangle>:
 * @param  xi&yi -> 3 coordinates of 3 top points.
 * @param color ->color of the triangle
 * @return  none
 */
void ST7789_DrawFilledTriangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t x3, uint16_t y3, uint16_t color)
{
 8000f30:	b590      	push	{r4, r7, lr}
 8000f32:	b08d      	sub	sp, #52	; 0x34
 8000f34:	af02      	add	r7, sp, #8
 8000f36:	4604      	mov	r4, r0
 8000f38:	4608      	mov	r0, r1
 8000f3a:	4611      	mov	r1, r2
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	4623      	mov	r3, r4
 8000f40:	80fb      	strh	r3, [r7, #6]
 8000f42:	4603      	mov	r3, r0
 8000f44:	80bb      	strh	r3, [r7, #4]
 8000f46:	460b      	mov	r3, r1
 8000f48:	807b      	strh	r3, [r7, #2]
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 8000f4e:	2200      	movs	r2, #0
 8000f50:	2102      	movs	r1, #2
 8000f52:	485d      	ldr	r0, [pc, #372]	; (80010c8 <ST7789_DrawFilledTriangle+0x198>)
 8000f54:	f000 ff56 	bl	8001e04 <HAL_GPIO_WritePin>
	int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0,
 8000f58:	2300      	movs	r3, #0
 8000f5a:	823b      	strh	r3, [r7, #16]
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	81fb      	strh	r3, [r7, #14]
 8000f60:	2300      	movs	r3, #0
 8000f62:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000f64:	2300      	movs	r3, #0
 8000f66:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000f68:	2300      	movs	r3, #0
 8000f6a:	847b      	strh	r3, [r7, #34]	; 0x22
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	843b      	strh	r3, [r7, #32]
			yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0,
 8000f70:	2300      	movs	r3, #0
 8000f72:	83fb      	strh	r3, [r7, #30]
 8000f74:	2300      	movs	r3, #0
 8000f76:	83bb      	strh	r3, [r7, #28]
 8000f78:	2300      	movs	r3, #0
 8000f7a:	837b      	strh	r3, [r7, #26]
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	833b      	strh	r3, [r7, #24]
 8000f80:	2300      	movs	r3, #0
 8000f82:	82fb      	strh	r3, [r7, #22]
 8000f84:	2300      	movs	r3, #0
 8000f86:	82bb      	strh	r3, [r7, #20]
			curpixel = 0;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	827b      	strh	r3, [r7, #18]

	deltax = ABS(x2 - x1);
 8000f8c:	887a      	ldrh	r2, [r7, #2]
 8000f8e:	88fb      	ldrh	r3, [r7, #6]
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	bfb8      	it	lt
 8000f96:	425b      	neglt	r3, r3
 8000f98:	823b      	strh	r3, [r7, #16]
	deltay = ABS(y2 - y1);
 8000f9a:	883a      	ldrh	r2, [r7, #0]
 8000f9c:	88bb      	ldrh	r3, [r7, #4]
 8000f9e:	1ad3      	subs	r3, r2, r3
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	bfb8      	it	lt
 8000fa4:	425b      	neglt	r3, r3
 8000fa6:	81fb      	strh	r3, [r7, #14]
	x = x1;
 8000fa8:	88fb      	ldrh	r3, [r7, #6]
 8000faa:	84fb      	strh	r3, [r7, #38]	; 0x26
	y = y1;
 8000fac:	88bb      	ldrh	r3, [r7, #4]
 8000fae:	84bb      	strh	r3, [r7, #36]	; 0x24

	if (x2 >= x1) {
 8000fb0:	887a      	ldrh	r2, [r7, #2]
 8000fb2:	88fb      	ldrh	r3, [r7, #6]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d304      	bcc.n	8000fc2 <ST7789_DrawFilledTriangle+0x92>
		xinc1 = 1;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	847b      	strh	r3, [r7, #34]	; 0x22
		xinc2 = 1;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	843b      	strh	r3, [r7, #32]
 8000fc0:	e005      	b.n	8000fce <ST7789_DrawFilledTriangle+0x9e>
	}
	else {
		xinc1 = -1;
 8000fc2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fc6:	847b      	strh	r3, [r7, #34]	; 0x22
		xinc2 = -1;
 8000fc8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fcc:	843b      	strh	r3, [r7, #32]
	}

	if (y2 >= y1) {
 8000fce:	883a      	ldrh	r2, [r7, #0]
 8000fd0:	88bb      	ldrh	r3, [r7, #4]
 8000fd2:	429a      	cmp	r2, r3
 8000fd4:	d304      	bcc.n	8000fe0 <ST7789_DrawFilledTriangle+0xb0>
		yinc1 = 1;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	83fb      	strh	r3, [r7, #30]
		yinc2 = 1;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	83bb      	strh	r3, [r7, #28]
 8000fde:	e005      	b.n	8000fec <ST7789_DrawFilledTriangle+0xbc>
	}
	else {
		yinc1 = -1;
 8000fe0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fe4:	83fb      	strh	r3, [r7, #30]
		yinc2 = -1;
 8000fe6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fea:	83bb      	strh	r3, [r7, #28]
	}

	if (deltax >= deltay) {
 8000fec:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000ff0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	db10      	blt.n	800101a <ST7789_DrawFilledTriangle+0xea>
		xinc1 = 0;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	847b      	strh	r3, [r7, #34]	; 0x22
		yinc2 = 0;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	83bb      	strh	r3, [r7, #28]
		den = deltax;
 8001000:	8a3b      	ldrh	r3, [r7, #16]
 8001002:	837b      	strh	r3, [r7, #26]
		num = deltax / 2;
 8001004:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001008:	0fda      	lsrs	r2, r3, #31
 800100a:	4413      	add	r3, r2
 800100c:	105b      	asrs	r3, r3, #1
 800100e:	833b      	strh	r3, [r7, #24]
		numadd = deltay;
 8001010:	89fb      	ldrh	r3, [r7, #14]
 8001012:	82fb      	strh	r3, [r7, #22]
		numpixels = deltax;
 8001014:	8a3b      	ldrh	r3, [r7, #16]
 8001016:	82bb      	strh	r3, [r7, #20]
 8001018:	e00f      	b.n	800103a <ST7789_DrawFilledTriangle+0x10a>
	}
	else {
		xinc2 = 0;
 800101a:	2300      	movs	r3, #0
 800101c:	843b      	strh	r3, [r7, #32]
		yinc1 = 0;
 800101e:	2300      	movs	r3, #0
 8001020:	83fb      	strh	r3, [r7, #30]
		den = deltay;
 8001022:	89fb      	ldrh	r3, [r7, #14]
 8001024:	837b      	strh	r3, [r7, #26]
		num = deltay / 2;
 8001026:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800102a:	0fda      	lsrs	r2, r3, #31
 800102c:	4413      	add	r3, r2
 800102e:	105b      	asrs	r3, r3, #1
 8001030:	833b      	strh	r3, [r7, #24]
		numadd = deltax;
 8001032:	8a3b      	ldrh	r3, [r7, #16]
 8001034:	82fb      	strh	r3, [r7, #22]
		numpixels = deltay;
 8001036:	89fb      	ldrh	r3, [r7, #14]
 8001038:	82bb      	strh	r3, [r7, #20]
	}

	for (curpixel = 0; curpixel <= numpixels; curpixel++) {
 800103a:	2300      	movs	r3, #0
 800103c:	827b      	strh	r3, [r7, #18]
 800103e:	e033      	b.n	80010a8 <ST7789_DrawFilledTriangle+0x178>
		ST7789_DrawLine(x, y, x3, y3, color);
 8001040:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8001042:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8001044:	8fbc      	ldrh	r4, [r7, #60]	; 0x3c
 8001046:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8001048:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800104c:	9300      	str	r3, [sp, #0]
 800104e:	4623      	mov	r3, r4
 8001050:	f7ff fc06 	bl	8000860 <ST7789_DrawLine>

		num += numadd;
 8001054:	8b3a      	ldrh	r2, [r7, #24]
 8001056:	8afb      	ldrh	r3, [r7, #22]
 8001058:	4413      	add	r3, r2
 800105a:	b29b      	uxth	r3, r3
 800105c:	833b      	strh	r3, [r7, #24]
		if (num >= den) {
 800105e:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001062:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001066:	429a      	cmp	r2, r3
 8001068:	db0e      	blt.n	8001088 <ST7789_DrawFilledTriangle+0x158>
			num -= den;
 800106a:	8b3a      	ldrh	r2, [r7, #24]
 800106c:	8b7b      	ldrh	r3, [r7, #26]
 800106e:	1ad3      	subs	r3, r2, r3
 8001070:	b29b      	uxth	r3, r3
 8001072:	833b      	strh	r3, [r7, #24]
			x += xinc1;
 8001074:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001076:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001078:	4413      	add	r3, r2
 800107a:	b29b      	uxth	r3, r3
 800107c:	84fb      	strh	r3, [r7, #38]	; 0x26
			y += yinc1;
 800107e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001080:	8bfb      	ldrh	r3, [r7, #30]
 8001082:	4413      	add	r3, r2
 8001084:	b29b      	uxth	r3, r3
 8001086:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		x += xinc2;
 8001088:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800108a:	8c3b      	ldrh	r3, [r7, #32]
 800108c:	4413      	add	r3, r2
 800108e:	b29b      	uxth	r3, r3
 8001090:	84fb      	strh	r3, [r7, #38]	; 0x26
		y += yinc2;
 8001092:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001094:	8bbb      	ldrh	r3, [r7, #28]
 8001096:	4413      	add	r3, r2
 8001098:	b29b      	uxth	r3, r3
 800109a:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (curpixel = 0; curpixel <= numpixels; curpixel++) {
 800109c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80010a0:	b29b      	uxth	r3, r3
 80010a2:	3301      	adds	r3, #1
 80010a4:	b29b      	uxth	r3, r3
 80010a6:	827b      	strh	r3, [r7, #18]
 80010a8:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80010ac:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	ddc5      	ble.n	8001040 <ST7789_DrawFilledTriangle+0x110>
	}
	ST7789_UnSelect();
 80010b4:	2201      	movs	r2, #1
 80010b6:	2102      	movs	r1, #2
 80010b8:	4803      	ldr	r0, [pc, #12]	; (80010c8 <ST7789_DrawFilledTriangle+0x198>)
 80010ba:	f000 fea3 	bl	8001e04 <HAL_GPIO_WritePin>
}
 80010be:	bf00      	nop
 80010c0:	372c      	adds	r7, #44	; 0x2c
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd90      	pop	{r4, r7, pc}
 80010c6:	bf00      	nop
 80010c8:	40010c00 	.word	0x40010c00

080010cc <ST7789_DrawFilledCircle>:
 * @param r -> radius of circle
 * @param color -> color of circle
 * @return  none
 */
void ST7789_DrawFilledCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 80010cc:	b590      	push	{r4, r7, lr}
 80010ce:	b089      	sub	sp, #36	; 0x24
 80010d0:	af02      	add	r7, sp, #8
 80010d2:	4604      	mov	r4, r0
 80010d4:	4608      	mov	r0, r1
 80010d6:	4611      	mov	r1, r2
 80010d8:	461a      	mov	r2, r3
 80010da:	4623      	mov	r3, r4
 80010dc:	80fb      	strh	r3, [r7, #6]
 80010de:	4603      	mov	r3, r0
 80010e0:	80bb      	strh	r3, [r7, #4]
 80010e2:	460b      	mov	r3, r1
 80010e4:	807b      	strh	r3, [r7, #2]
 80010e6:	4613      	mov	r3, r2
 80010e8:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 80010ea:	2200      	movs	r2, #0
 80010ec:	2102      	movs	r1, #2
 80010ee:	4869      	ldr	r0, [pc, #420]	; (8001294 <ST7789_DrawFilledCircle+0x1c8>)
 80010f0:	f000 fe88 	bl	8001e04 <HAL_GPIO_WritePin>
	int16_t f = 1 - r;
 80010f4:	887b      	ldrh	r3, [r7, #2]
 80010f6:	f1c3 0301 	rsb	r3, r3, #1
 80010fa:	b29b      	uxth	r3, r3
 80010fc:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 80010fe:	2301      	movs	r3, #1
 8001100:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8001102:	887b      	ldrh	r3, [r7, #2]
 8001104:	461a      	mov	r2, r3
 8001106:	03d2      	lsls	r2, r2, #15
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	b29b      	uxth	r3, r3
 800110e:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8001110:	2300      	movs	r3, #0
 8001112:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 8001114:	887b      	ldrh	r3, [r7, #2]
 8001116:	81fb      	strh	r3, [r7, #14]

	ST7789_DrawPixel(x0, y0 + r, color);
 8001118:	88f8      	ldrh	r0, [r7, #6]
 800111a:	88ba      	ldrh	r2, [r7, #4]
 800111c:	887b      	ldrh	r3, [r7, #2]
 800111e:	4413      	add	r3, r2
 8001120:	b29b      	uxth	r3, r3
 8001122:	883a      	ldrh	r2, [r7, #0]
 8001124:	4619      	mov	r1, r3
 8001126:	f7ff fb67 	bl	80007f8 <ST7789_DrawPixel>
	ST7789_DrawPixel(x0, y0 - r, color);
 800112a:	88f8      	ldrh	r0, [r7, #6]
 800112c:	88ba      	ldrh	r2, [r7, #4]
 800112e:	887b      	ldrh	r3, [r7, #2]
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	b29b      	uxth	r3, r3
 8001134:	883a      	ldrh	r2, [r7, #0]
 8001136:	4619      	mov	r1, r3
 8001138:	f7ff fb5e 	bl	80007f8 <ST7789_DrawPixel>
	ST7789_DrawPixel(x0 + r, y0, color);
 800113c:	88fa      	ldrh	r2, [r7, #6]
 800113e:	887b      	ldrh	r3, [r7, #2]
 8001140:	4413      	add	r3, r2
 8001142:	b29b      	uxth	r3, r3
 8001144:	88b9      	ldrh	r1, [r7, #4]
 8001146:	883a      	ldrh	r2, [r7, #0]
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff fb55 	bl	80007f8 <ST7789_DrawPixel>
	ST7789_DrawPixel(x0 - r, y0, color);
 800114e:	88fa      	ldrh	r2, [r7, #6]
 8001150:	887b      	ldrh	r3, [r7, #2]
 8001152:	1ad3      	subs	r3, r2, r3
 8001154:	b29b      	uxth	r3, r3
 8001156:	88b9      	ldrh	r1, [r7, #4]
 8001158:	883a      	ldrh	r2, [r7, #0]
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff fb4c 	bl	80007f8 <ST7789_DrawPixel>
	ST7789_DrawLine(x0 - r, y0, x0 + r, y0, color);
 8001160:	88fa      	ldrh	r2, [r7, #6]
 8001162:	887b      	ldrh	r3, [r7, #2]
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	b298      	uxth	r0, r3
 8001168:	88b9      	ldrh	r1, [r7, #4]
 800116a:	88fa      	ldrh	r2, [r7, #6]
 800116c:	887b      	ldrh	r3, [r7, #2]
 800116e:	4413      	add	r3, r2
 8001170:	b29a      	uxth	r2, r3
 8001172:	88bc      	ldrh	r4, [r7, #4]
 8001174:	883b      	ldrh	r3, [r7, #0]
 8001176:	9300      	str	r3, [sp, #0]
 8001178:	4623      	mov	r3, r4
 800117a:	f7ff fb71 	bl	8000860 <ST7789_DrawLine>

	while (x < y) {
 800117e:	e079      	b.n	8001274 <ST7789_DrawFilledCircle+0x1a8>
		if (f >= 0) {
 8001180:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001184:	2b00      	cmp	r3, #0
 8001186:	db0e      	blt.n	80011a6 <ST7789_DrawFilledCircle+0xda>
			y--;
 8001188:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800118c:	b29b      	uxth	r3, r3
 800118e:	3b01      	subs	r3, #1
 8001190:	b29b      	uxth	r3, r3
 8001192:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 8001194:	8a7b      	ldrh	r3, [r7, #18]
 8001196:	3302      	adds	r3, #2
 8001198:	b29b      	uxth	r3, r3
 800119a:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 800119c:	8afa      	ldrh	r2, [r7, #22]
 800119e:	8a7b      	ldrh	r3, [r7, #18]
 80011a0:	4413      	add	r3, r2
 80011a2:	b29b      	uxth	r3, r3
 80011a4:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 80011a6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80011aa:	b29b      	uxth	r3, r3
 80011ac:	3301      	adds	r3, #1
 80011ae:	b29b      	uxth	r3, r3
 80011b0:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 80011b2:	8abb      	ldrh	r3, [r7, #20]
 80011b4:	3302      	adds	r3, #2
 80011b6:	b29b      	uxth	r3, r3
 80011b8:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 80011ba:	8afa      	ldrh	r2, [r7, #22]
 80011bc:	8abb      	ldrh	r3, [r7, #20]
 80011be:	4413      	add	r3, r2
 80011c0:	b29b      	uxth	r3, r3
 80011c2:	82fb      	strh	r3, [r7, #22]

		ST7789_DrawLine(x0 - x, y0 + y, x0 + x, y0 + y, color);
 80011c4:	88fa      	ldrh	r2, [r7, #6]
 80011c6:	8a3b      	ldrh	r3, [r7, #16]
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	b298      	uxth	r0, r3
 80011cc:	88ba      	ldrh	r2, [r7, #4]
 80011ce:	89fb      	ldrh	r3, [r7, #14]
 80011d0:	4413      	add	r3, r2
 80011d2:	b299      	uxth	r1, r3
 80011d4:	88fa      	ldrh	r2, [r7, #6]
 80011d6:	8a3b      	ldrh	r3, [r7, #16]
 80011d8:	4413      	add	r3, r2
 80011da:	b29c      	uxth	r4, r3
 80011dc:	88ba      	ldrh	r2, [r7, #4]
 80011de:	89fb      	ldrh	r3, [r7, #14]
 80011e0:	4413      	add	r3, r2
 80011e2:	b29a      	uxth	r2, r3
 80011e4:	883b      	ldrh	r3, [r7, #0]
 80011e6:	9300      	str	r3, [sp, #0]
 80011e8:	4613      	mov	r3, r2
 80011ea:	4622      	mov	r2, r4
 80011ec:	f7ff fb38 	bl	8000860 <ST7789_DrawLine>
		ST7789_DrawLine(x0 + x, y0 - y, x0 - x, y0 - y, color);
 80011f0:	88fa      	ldrh	r2, [r7, #6]
 80011f2:	8a3b      	ldrh	r3, [r7, #16]
 80011f4:	4413      	add	r3, r2
 80011f6:	b298      	uxth	r0, r3
 80011f8:	88ba      	ldrh	r2, [r7, #4]
 80011fa:	89fb      	ldrh	r3, [r7, #14]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	b299      	uxth	r1, r3
 8001200:	88fa      	ldrh	r2, [r7, #6]
 8001202:	8a3b      	ldrh	r3, [r7, #16]
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	b29c      	uxth	r4, r3
 8001208:	88ba      	ldrh	r2, [r7, #4]
 800120a:	89fb      	ldrh	r3, [r7, #14]
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	b29a      	uxth	r2, r3
 8001210:	883b      	ldrh	r3, [r7, #0]
 8001212:	9300      	str	r3, [sp, #0]
 8001214:	4613      	mov	r3, r2
 8001216:	4622      	mov	r2, r4
 8001218:	f7ff fb22 	bl	8000860 <ST7789_DrawLine>

		ST7789_DrawLine(x0 + y, y0 + x, x0 - y, y0 + x, color);
 800121c:	88fa      	ldrh	r2, [r7, #6]
 800121e:	89fb      	ldrh	r3, [r7, #14]
 8001220:	4413      	add	r3, r2
 8001222:	b298      	uxth	r0, r3
 8001224:	88ba      	ldrh	r2, [r7, #4]
 8001226:	8a3b      	ldrh	r3, [r7, #16]
 8001228:	4413      	add	r3, r2
 800122a:	b299      	uxth	r1, r3
 800122c:	88fa      	ldrh	r2, [r7, #6]
 800122e:	89fb      	ldrh	r3, [r7, #14]
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	b29c      	uxth	r4, r3
 8001234:	88ba      	ldrh	r2, [r7, #4]
 8001236:	8a3b      	ldrh	r3, [r7, #16]
 8001238:	4413      	add	r3, r2
 800123a:	b29a      	uxth	r2, r3
 800123c:	883b      	ldrh	r3, [r7, #0]
 800123e:	9300      	str	r3, [sp, #0]
 8001240:	4613      	mov	r3, r2
 8001242:	4622      	mov	r2, r4
 8001244:	f7ff fb0c 	bl	8000860 <ST7789_DrawLine>
		ST7789_DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, color);
 8001248:	88fa      	ldrh	r2, [r7, #6]
 800124a:	89fb      	ldrh	r3, [r7, #14]
 800124c:	4413      	add	r3, r2
 800124e:	b298      	uxth	r0, r3
 8001250:	88ba      	ldrh	r2, [r7, #4]
 8001252:	8a3b      	ldrh	r3, [r7, #16]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	b299      	uxth	r1, r3
 8001258:	88fa      	ldrh	r2, [r7, #6]
 800125a:	89fb      	ldrh	r3, [r7, #14]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	b29c      	uxth	r4, r3
 8001260:	88ba      	ldrh	r2, [r7, #4]
 8001262:	8a3b      	ldrh	r3, [r7, #16]
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	b29a      	uxth	r2, r3
 8001268:	883b      	ldrh	r3, [r7, #0]
 800126a:	9300      	str	r3, [sp, #0]
 800126c:	4613      	mov	r3, r2
 800126e:	4622      	mov	r2, r4
 8001270:	f7ff faf6 	bl	8000860 <ST7789_DrawLine>
	while (x < y) {
 8001274:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001278:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800127c:	429a      	cmp	r2, r3
 800127e:	f6ff af7f 	blt.w	8001180 <ST7789_DrawFilledCircle+0xb4>
	}
	ST7789_UnSelect();
 8001282:	2201      	movs	r2, #1
 8001284:	2102      	movs	r1, #2
 8001286:	4803      	ldr	r0, [pc, #12]	; (8001294 <ST7789_DrawFilledCircle+0x1c8>)
 8001288:	f000 fdbc 	bl	8001e04 <HAL_GPIO_WritePin>
}
 800128c:	bf00      	nop
 800128e:	371c      	adds	r7, #28
 8001290:	46bd      	mov	sp, r7
 8001292:	bd90      	pop	{r4, r7, pc}
 8001294:	40010c00 	.word	0x40010c00

08001298 <ST7789_Test>:
 * @brief A Simple test function for ST7789
 * @param  none
 * @return  none
 */
void ST7789_Test(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af04      	add	r7, sp, #16
	ST7789_Fill_Color(WHITE);
 800129e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80012a2:	f7ff fa6d 	bl	8000780 <ST7789_Fill_Color>
	HAL_Delay(1000);
 80012a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012aa:	f000 faf5 	bl	8001898 <HAL_Delay>
	ST7789_WriteString(10, 20, "Speed Test", Font_11x18, RED, WHITE);
 80012ae:	4bc1      	ldr	r3, [pc, #772]	; (80015b4 <ST7789_Test+0x31c>)
 80012b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012b4:	9202      	str	r2, [sp, #8]
 80012b6:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80012ba:	9201      	str	r2, [sp, #4]
 80012bc:	685a      	ldr	r2, [r3, #4]
 80012be:	9200      	str	r2, [sp, #0]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4abd      	ldr	r2, [pc, #756]	; (80015b8 <ST7789_Test+0x320>)
 80012c4:	2114      	movs	r1, #20
 80012c6:	200a      	movs	r0, #10
 80012c8:	f7ff fd4e 	bl	8000d68 <ST7789_WriteString>
	HAL_Delay(1000);
 80012cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012d0:	f000 fae2 	bl	8001898 <HAL_Delay>
	ST7789_Fill_Color(CYAN);
 80012d4:	f647 70ff 	movw	r0, #32767	; 0x7fff
 80012d8:	f7ff fa52 	bl	8000780 <ST7789_Fill_Color>
    HAL_Delay(500);
 80012dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012e0:	f000 fada 	bl	8001898 <HAL_Delay>
	ST7789_Fill_Color(RED);
 80012e4:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80012e8:	f7ff fa4a 	bl	8000780 <ST7789_Fill_Color>
    HAL_Delay(500);
 80012ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012f0:	f000 fad2 	bl	8001898 <HAL_Delay>
	ST7789_Fill_Color(BLUE);
 80012f4:	201f      	movs	r0, #31
 80012f6:	f7ff fa43 	bl	8000780 <ST7789_Fill_Color>
    HAL_Delay(500);
 80012fa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012fe:	f000 facb 	bl	8001898 <HAL_Delay>
	ST7789_Fill_Color(GREEN);
 8001302:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8001306:	f7ff fa3b 	bl	8000780 <ST7789_Fill_Color>
    HAL_Delay(500);
 800130a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800130e:	f000 fac3 	bl	8001898 <HAL_Delay>
	ST7789_Fill_Color(YELLOW);
 8001312:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8001316:	f7ff fa33 	bl	8000780 <ST7789_Fill_Color>
    HAL_Delay(500);
 800131a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800131e:	f000 fabb 	bl	8001898 <HAL_Delay>
	ST7789_Fill_Color(BROWN);
 8001322:	f64b 4040 	movw	r0, #48192	; 0xbc40
 8001326:	f7ff fa2b 	bl	8000780 <ST7789_Fill_Color>
    HAL_Delay(500);
 800132a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800132e:	f000 fab3 	bl	8001898 <HAL_Delay>
	ST7789_Fill_Color(DARKBLUE);
 8001332:	f240 10cf 	movw	r0, #463	; 0x1cf
 8001336:	f7ff fa23 	bl	8000780 <ST7789_Fill_Color>
    HAL_Delay(500);
 800133a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800133e:	f000 faab 	bl	8001898 <HAL_Delay>
	ST7789_Fill_Color(MAGENTA);
 8001342:	f64f 001f 	movw	r0, #63519	; 0xf81f
 8001346:	f7ff fa1b 	bl	8000780 <ST7789_Fill_Color>
    HAL_Delay(500);
 800134a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800134e:	f000 faa3 	bl	8001898 <HAL_Delay>
	ST7789_Fill_Color(LIGHTGREEN);
 8001352:	f248 401f 	movw	r0, #33823	; 0x841f
 8001356:	f7ff fa13 	bl	8000780 <ST7789_Fill_Color>
    HAL_Delay(500);
 800135a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800135e:	f000 fa9b 	bl	8001898 <HAL_Delay>
	ST7789_Fill_Color(LGRAY);
 8001362:	f24c 6018 	movw	r0, #50712	; 0xc618
 8001366:	f7ff fa0b 	bl	8000780 <ST7789_Fill_Color>
    HAL_Delay(500);
 800136a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800136e:	f000 fa93 	bl	8001898 <HAL_Delay>
	ST7789_Fill_Color(LBBLUE);
 8001372:	f642 3012 	movw	r0, #11026	; 0x2b12
 8001376:	f7ff fa03 	bl	8000780 <ST7789_Fill_Color>
    HAL_Delay(500);
 800137a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800137e:	f000 fa8b 	bl	8001898 <HAL_Delay>
	ST7789_Fill_Color(WHITE);
 8001382:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001386:	f7ff f9fb 	bl	8000780 <ST7789_Fill_Color>
	HAL_Delay(500);
 800138a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800138e:	f000 fa83 	bl	8001898 <HAL_Delay>

	ST7789_WriteString(10, 10, "Font test.", Font_16x26, GBLUE, WHITE);
 8001392:	4b8a      	ldr	r3, [pc, #552]	; (80015bc <ST7789_Test+0x324>)
 8001394:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001398:	9202      	str	r2, [sp, #8]
 800139a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800139e:	9201      	str	r2, [sp, #4]
 80013a0:	685a      	ldr	r2, [r3, #4]
 80013a2:	9200      	str	r2, [sp, #0]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a86      	ldr	r2, [pc, #536]	; (80015c0 <ST7789_Test+0x328>)
 80013a8:	210a      	movs	r1, #10
 80013aa:	200a      	movs	r0, #10
 80013ac:	f7ff fcdc 	bl	8000d68 <ST7789_WriteString>
	ST7789_WriteString(10, 50, "Hello Steve!", Font_7x10, RED, WHITE);
 80013b0:	4b84      	ldr	r3, [pc, #528]	; (80015c4 <ST7789_Test+0x32c>)
 80013b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013b6:	9202      	str	r2, [sp, #8]
 80013b8:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80013bc:	9201      	str	r2, [sp, #4]
 80013be:	685a      	ldr	r2, [r3, #4]
 80013c0:	9200      	str	r2, [sp, #0]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a80      	ldr	r2, [pc, #512]	; (80015c8 <ST7789_Test+0x330>)
 80013c6:	2132      	movs	r1, #50	; 0x32
 80013c8:	200a      	movs	r0, #10
 80013ca:	f7ff fccd 	bl	8000d68 <ST7789_WriteString>
	ST7789_WriteString(10, 75, "Hello Steve!", Font_11x18, YELLOW, WHITE);
 80013ce:	4b79      	ldr	r3, [pc, #484]	; (80015b4 <ST7789_Test+0x31c>)
 80013d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013d4:	9202      	str	r2, [sp, #8]
 80013d6:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80013da:	9201      	str	r2, [sp, #4]
 80013dc:	685a      	ldr	r2, [r3, #4]
 80013de:	9200      	str	r2, [sp, #0]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a79      	ldr	r2, [pc, #484]	; (80015c8 <ST7789_Test+0x330>)
 80013e4:	214b      	movs	r1, #75	; 0x4b
 80013e6:	200a      	movs	r0, #10
 80013e8:	f7ff fcbe 	bl	8000d68 <ST7789_WriteString>
	ST7789_WriteString(10, 100, "Hello Steve!", Font_16x26, MAGENTA, WHITE);
 80013ec:	4b73      	ldr	r3, [pc, #460]	; (80015bc <ST7789_Test+0x324>)
 80013ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013f2:	9202      	str	r2, [sp, #8]
 80013f4:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80013f8:	9201      	str	r2, [sp, #4]
 80013fa:	685a      	ldr	r2, [r3, #4]
 80013fc:	9200      	str	r2, [sp, #0]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a71      	ldr	r2, [pc, #452]	; (80015c8 <ST7789_Test+0x330>)
 8001402:	2164      	movs	r1, #100	; 0x64
 8001404:	200a      	movs	r0, #10
 8001406:	f7ff fcaf 	bl	8000d68 <ST7789_WriteString>
	HAL_Delay(1000);
 800140a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800140e:	f000 fa43 	bl	8001898 <HAL_Delay>

	ST7789_Fill_Color(RED);
 8001412:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001416:	f7ff f9b3 	bl	8000780 <ST7789_Fill_Color>
	ST7789_WriteString(10, 10, "Rect./Line.", Font_11x18, YELLOW, BLACK);
 800141a:	4b66      	ldr	r3, [pc, #408]	; (80015b4 <ST7789_Test+0x31c>)
 800141c:	2200      	movs	r2, #0
 800141e:	9202      	str	r2, [sp, #8]
 8001420:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001424:	9201      	str	r2, [sp, #4]
 8001426:	685a      	ldr	r2, [r3, #4]
 8001428:	9200      	str	r2, [sp, #0]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a67      	ldr	r2, [pc, #412]	; (80015cc <ST7789_Test+0x334>)
 800142e:	210a      	movs	r1, #10
 8001430:	200a      	movs	r0, #10
 8001432:	f7ff fc99 	bl	8000d68 <ST7789_WriteString>
	ST7789_DrawRectangle(30, 30, 100, 100, WHITE);
 8001436:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800143a:	9300      	str	r3, [sp, #0]
 800143c:	2364      	movs	r3, #100	; 0x64
 800143e:	2264      	movs	r2, #100	; 0x64
 8001440:	211e      	movs	r1, #30
 8001442:	201e      	movs	r0, #30
 8001444:	f7ff fa98 	bl	8000978 <ST7789_DrawRectangle>
	HAL_Delay(1000);
 8001448:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800144c:	f000 fa24 	bl	8001898 <HAL_Delay>

	ST7789_Fill_Color(RED);
 8001450:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001454:	f7ff f994 	bl	8000780 <ST7789_Fill_Color>
	ST7789_WriteString(10, 10, "Filled Rect.", Font_11x18, YELLOW, BLACK);
 8001458:	4b56      	ldr	r3, [pc, #344]	; (80015b4 <ST7789_Test+0x31c>)
 800145a:	2200      	movs	r2, #0
 800145c:	9202      	str	r2, [sp, #8]
 800145e:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001462:	9201      	str	r2, [sp, #4]
 8001464:	685a      	ldr	r2, [r3, #4]
 8001466:	9200      	str	r2, [sp, #0]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a59      	ldr	r2, [pc, #356]	; (80015d0 <ST7789_Test+0x338>)
 800146c:	210a      	movs	r1, #10
 800146e:	200a      	movs	r0, #10
 8001470:	f7ff fc7a 	bl	8000d68 <ST7789_WriteString>
	ST7789_DrawFilledRectangle(30, 30, 50, 50, WHITE);
 8001474:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001478:	9300      	str	r3, [sp, #0]
 800147a:	2332      	movs	r3, #50	; 0x32
 800147c:	2232      	movs	r2, #50	; 0x32
 800147e:	211e      	movs	r1, #30
 8001480:	201e      	movs	r0, #30
 8001482:	f7ff fcc3 	bl	8000e0c <ST7789_DrawFilledRectangle>
	HAL_Delay(1000);
 8001486:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800148a:	f000 fa05 	bl	8001898 <HAL_Delay>

	ST7789_Fill_Color(RED);
 800148e:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001492:	f7ff f975 	bl	8000780 <ST7789_Fill_Color>
	ST7789_WriteString(10, 10, "Circle.", Font_11x18, YELLOW, BLACK);
 8001496:	4b47      	ldr	r3, [pc, #284]	; (80015b4 <ST7789_Test+0x31c>)
 8001498:	2200      	movs	r2, #0
 800149a:	9202      	str	r2, [sp, #8]
 800149c:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80014a0:	9201      	str	r2, [sp, #4]
 80014a2:	685a      	ldr	r2, [r3, #4]
 80014a4:	9200      	str	r2, [sp, #0]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a4a      	ldr	r2, [pc, #296]	; (80015d4 <ST7789_Test+0x33c>)
 80014aa:	210a      	movs	r1, #10
 80014ac:	200a      	movs	r0, #10
 80014ae:	f7ff fc5b 	bl	8000d68 <ST7789_WriteString>
	ST7789_DrawCircle(60, 60, 25, WHITE);
 80014b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014b6:	2219      	movs	r2, #25
 80014b8:	213c      	movs	r1, #60	; 0x3c
 80014ba:	203c      	movs	r0, #60	; 0x3c
 80014bc:	f7ff faa0 	bl	8000a00 <ST7789_DrawCircle>
	HAL_Delay(1000);
 80014c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014c4:	f000 f9e8 	bl	8001898 <HAL_Delay>

	ST7789_Fill_Color(RED);
 80014c8:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80014cc:	f7ff f958 	bl	8000780 <ST7789_Fill_Color>
	ST7789_WriteString(10, 10, "Filled Cir.", Font_11x18, YELLOW, BLACK);
 80014d0:	4b38      	ldr	r3, [pc, #224]	; (80015b4 <ST7789_Test+0x31c>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	9202      	str	r2, [sp, #8]
 80014d6:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80014da:	9201      	str	r2, [sp, #4]
 80014dc:	685a      	ldr	r2, [r3, #4]
 80014de:	9200      	str	r2, [sp, #0]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a3d      	ldr	r2, [pc, #244]	; (80015d8 <ST7789_Test+0x340>)
 80014e4:	210a      	movs	r1, #10
 80014e6:	200a      	movs	r0, #10
 80014e8:	f7ff fc3e 	bl	8000d68 <ST7789_WriteString>
	ST7789_DrawFilledCircle(60, 60, 25, WHITE);
 80014ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014f0:	2219      	movs	r2, #25
 80014f2:	213c      	movs	r1, #60	; 0x3c
 80014f4:	203c      	movs	r0, #60	; 0x3c
 80014f6:	f7ff fde9 	bl	80010cc <ST7789_DrawFilledCircle>
	HAL_Delay(1000);
 80014fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014fe:	f000 f9cb 	bl	8001898 <HAL_Delay>

	ST7789_Fill_Color(RED);
 8001502:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001506:	f7ff f93b 	bl	8000780 <ST7789_Fill_Color>
	ST7789_WriteString(10, 10, "Triangle", Font_11x18, YELLOW, BLACK);
 800150a:	4b2a      	ldr	r3, [pc, #168]	; (80015b4 <ST7789_Test+0x31c>)
 800150c:	2200      	movs	r2, #0
 800150e:	9202      	str	r2, [sp, #8]
 8001510:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001514:	9201      	str	r2, [sp, #4]
 8001516:	685a      	ldr	r2, [r3, #4]
 8001518:	9200      	str	r2, [sp, #0]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a2f      	ldr	r2, [pc, #188]	; (80015dc <ST7789_Test+0x344>)
 800151e:	210a      	movs	r1, #10
 8001520:	200a      	movs	r0, #10
 8001522:	f7ff fc21 	bl	8000d68 <ST7789_WriteString>
	ST7789_DrawTriangle(30, 30, 30, 70, 60, 40, WHITE);
 8001526:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800152a:	9302      	str	r3, [sp, #8]
 800152c:	2328      	movs	r3, #40	; 0x28
 800152e:	9301      	str	r3, [sp, #4]
 8001530:	233c      	movs	r3, #60	; 0x3c
 8001532:	9300      	str	r3, [sp, #0]
 8001534:	2346      	movs	r3, #70	; 0x46
 8001536:	221e      	movs	r2, #30
 8001538:	211e      	movs	r1, #30
 800153a:	201e      	movs	r0, #30
 800153c:	f7ff fcbe 	bl	8000ebc <ST7789_DrawTriangle>
	HAL_Delay(1000);
 8001540:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001544:	f000 f9a8 	bl	8001898 <HAL_Delay>

	ST7789_Fill_Color(RED);
 8001548:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 800154c:	f7ff f918 	bl	8000780 <ST7789_Fill_Color>
	ST7789_WriteString(10, 10, "Filled Tri", Font_11x18, YELLOW, BLACK);
 8001550:	4b18      	ldr	r3, [pc, #96]	; (80015b4 <ST7789_Test+0x31c>)
 8001552:	2200      	movs	r2, #0
 8001554:	9202      	str	r2, [sp, #8]
 8001556:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800155a:	9201      	str	r2, [sp, #4]
 800155c:	685a      	ldr	r2, [r3, #4]
 800155e:	9200      	str	r2, [sp, #0]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a1f      	ldr	r2, [pc, #124]	; (80015e0 <ST7789_Test+0x348>)
 8001564:	210a      	movs	r1, #10
 8001566:	200a      	movs	r0, #10
 8001568:	f7ff fbfe 	bl	8000d68 <ST7789_WriteString>
	ST7789_DrawFilledTriangle(30, 30, 30, 70, 60, 40, WHITE);
 800156c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001570:	9302      	str	r3, [sp, #8]
 8001572:	2328      	movs	r3, #40	; 0x28
 8001574:	9301      	str	r3, [sp, #4]
 8001576:	233c      	movs	r3, #60	; 0x3c
 8001578:	9300      	str	r3, [sp, #0]
 800157a:	2346      	movs	r3, #70	; 0x46
 800157c:	221e      	movs	r2, #30
 800157e:	211e      	movs	r1, #30
 8001580:	201e      	movs	r0, #30
 8001582:	f7ff fcd5 	bl	8000f30 <ST7789_DrawFilledTriangle>
	HAL_Delay(1000);
 8001586:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800158a:	f000 f985 	bl	8001898 <HAL_Delay>

	//	If FLASH cannot storage anymore datas, please delete codes below.
	ST7789_Fill_Color(WHITE);
 800158e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001592:	f7ff f8f5 	bl	8000780 <ST7789_Fill_Color>
	ST7789_DrawImage(0, 0, 128, 128, (uint16_t *)saber);
 8001596:	4b13      	ldr	r3, [pc, #76]	; (80015e4 <ST7789_Test+0x34c>)
 8001598:	9300      	str	r3, [sp, #0]
 800159a:	2380      	movs	r3, #128	; 0x80
 800159c:	2280      	movs	r2, #128	; 0x80
 800159e:	2100      	movs	r1, #0
 80015a0:	2000      	movs	r0, #0
 80015a2:	f7ff fb13 	bl	8000bcc <ST7789_DrawImage>
	HAL_Delay(3000);
 80015a6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80015aa:	f000 f975 	bl	8001898 <HAL_Delay>
}
 80015ae:	bf00      	nop
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	20000008 	.word	0x20000008
 80015b8:	08002dc8 	.word	0x08002dc8
 80015bc:	20000010 	.word	0x20000010
 80015c0:	08002dd4 	.word	0x08002dd4
 80015c4:	20000000 	.word	0x20000000
 80015c8:	08002de0 	.word	0x08002de0
 80015cc:	08002df0 	.word	0x08002df0
 80015d0:	08002dfc 	.word	0x08002dfc
 80015d4:	08002e0c 	.word	0x08002e0c
 80015d8:	08002e14 	.word	0x08002e14
 80015dc:	08002e20 	.word	0x08002e20
 80015e0:	08002e2c 	.word	0x08002e2c
 80015e4:	0800564c 	.word	0x0800564c

080015e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b085      	sub	sp, #20
 80015ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80015ee:	4b15      	ldr	r3, [pc, #84]	; (8001644 <HAL_MspInit+0x5c>)
 80015f0:	699b      	ldr	r3, [r3, #24]
 80015f2:	4a14      	ldr	r2, [pc, #80]	; (8001644 <HAL_MspInit+0x5c>)
 80015f4:	f043 0301 	orr.w	r3, r3, #1
 80015f8:	6193      	str	r3, [r2, #24]
 80015fa:	4b12      	ldr	r3, [pc, #72]	; (8001644 <HAL_MspInit+0x5c>)
 80015fc:	699b      	ldr	r3, [r3, #24]
 80015fe:	f003 0301 	and.w	r3, r3, #1
 8001602:	60bb      	str	r3, [r7, #8]
 8001604:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001606:	4b0f      	ldr	r3, [pc, #60]	; (8001644 <HAL_MspInit+0x5c>)
 8001608:	69db      	ldr	r3, [r3, #28]
 800160a:	4a0e      	ldr	r2, [pc, #56]	; (8001644 <HAL_MspInit+0x5c>)
 800160c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001610:	61d3      	str	r3, [r2, #28]
 8001612:	4b0c      	ldr	r3, [pc, #48]	; (8001644 <HAL_MspInit+0x5c>)
 8001614:	69db      	ldr	r3, [r3, #28]
 8001616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800161a:	607b      	str	r3, [r7, #4]
 800161c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800161e:	4b0a      	ldr	r3, [pc, #40]	; (8001648 <HAL_MspInit+0x60>)
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	60fb      	str	r3, [r7, #12]
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800162a:	60fb      	str	r3, [r7, #12]
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001632:	60fb      	str	r3, [r7, #12]
 8001634:	4a04      	ldr	r2, [pc, #16]	; (8001648 <HAL_MspInit+0x60>)
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800163a:	bf00      	nop
 800163c:	3714      	adds	r7, #20
 800163e:	46bd      	mov	sp, r7
 8001640:	bc80      	pop	{r7}
 8001642:	4770      	bx	lr
 8001644:	40021000 	.word	0x40021000
 8001648:	40010000 	.word	0x40010000

0800164c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001650:	e7fe      	b.n	8001650 <NMI_Handler+0x4>

08001652 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001652:	b480      	push	{r7}
 8001654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001656:	e7fe      	b.n	8001656 <HardFault_Handler+0x4>

08001658 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800165c:	e7fe      	b.n	800165c <MemManage_Handler+0x4>

0800165e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800165e:	b480      	push	{r7}
 8001660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001662:	e7fe      	b.n	8001662 <BusFault_Handler+0x4>

08001664 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001668:	e7fe      	b.n	8001668 <UsageFault_Handler+0x4>

0800166a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800166a:	b480      	push	{r7}
 800166c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800166e:	bf00      	nop
 8001670:	46bd      	mov	sp, r7
 8001672:	bc80      	pop	{r7}
 8001674:	4770      	bx	lr

08001676 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001676:	b480      	push	{r7}
 8001678:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800167a:	bf00      	nop
 800167c:	46bd      	mov	sp, r7
 800167e:	bc80      	pop	{r7}
 8001680:	4770      	bx	lr

08001682 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001682:	b480      	push	{r7}
 8001684:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001686:	bf00      	nop
 8001688:	46bd      	mov	sp, r7
 800168a:	bc80      	pop	{r7}
 800168c:	4770      	bx	lr

0800168e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800168e:	b580      	push	{r7, lr}
 8001690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001692:	f000 f8e5 	bl	8001860 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001696:	bf00      	nop
 8001698:	bd80      	pop	{r7, pc}

0800169a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800169a:	b580      	push	{r7, lr}
 800169c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800169e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80016a2:	f000 fbc7 	bl	8001e34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80016a6:	bf00      	nop
 80016a8:	bd80      	pop	{r7, pc}

080016aa <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80016aa:	b480      	push	{r7}
 80016ac:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016ae:	bf00      	nop
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bc80      	pop	{r7}
 80016b4:	4770      	bx	lr
	...

080016b8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016bc:	4b11      	ldr	r3, [pc, #68]	; (8001704 <MX_USART2_UART_Init+0x4c>)
 80016be:	4a12      	ldr	r2, [pc, #72]	; (8001708 <MX_USART2_UART_Init+0x50>)
 80016c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016c2:	4b10      	ldr	r3, [pc, #64]	; (8001704 <MX_USART2_UART_Init+0x4c>)
 80016c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016ca:	4b0e      	ldr	r3, [pc, #56]	; (8001704 <MX_USART2_UART_Init+0x4c>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016d0:	4b0c      	ldr	r3, [pc, #48]	; (8001704 <MX_USART2_UART_Init+0x4c>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016d6:	4b0b      	ldr	r3, [pc, #44]	; (8001704 <MX_USART2_UART_Init+0x4c>)
 80016d8:	2200      	movs	r2, #0
 80016da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016dc:	4b09      	ldr	r3, [pc, #36]	; (8001704 <MX_USART2_UART_Init+0x4c>)
 80016de:	220c      	movs	r2, #12
 80016e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016e2:	4b08      	ldr	r3, [pc, #32]	; (8001704 <MX_USART2_UART_Init+0x4c>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016e8:	4b06      	ldr	r3, [pc, #24]	; (8001704 <MX_USART2_UART_Init+0x4c>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016ee:	4805      	ldr	r0, [pc, #20]	; (8001704 <MX_USART2_UART_Init+0x4c>)
 80016f0:	f001 fa40 	bl	8002b74 <HAL_UART_Init>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80016fa:	f7fe fe1a 	bl	8000332 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	20000098 	.word	0x20000098
 8001708:	40004400 	.word	0x40004400

0800170c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b088      	sub	sp, #32
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001714:	f107 0310 	add.w	r3, r7, #16
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	605a      	str	r2, [r3, #4]
 800171e:	609a      	str	r2, [r3, #8]
 8001720:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a15      	ldr	r2, [pc, #84]	; (800177c <HAL_UART_MspInit+0x70>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d123      	bne.n	8001774 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800172c:	4b14      	ldr	r3, [pc, #80]	; (8001780 <HAL_UART_MspInit+0x74>)
 800172e:	69db      	ldr	r3, [r3, #28]
 8001730:	4a13      	ldr	r2, [pc, #76]	; (8001780 <HAL_UART_MspInit+0x74>)
 8001732:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001736:	61d3      	str	r3, [r2, #28]
 8001738:	4b11      	ldr	r3, [pc, #68]	; (8001780 <HAL_UART_MspInit+0x74>)
 800173a:	69db      	ldr	r3, [r3, #28]
 800173c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001740:	60fb      	str	r3, [r7, #12]
 8001742:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001744:	4b0e      	ldr	r3, [pc, #56]	; (8001780 <HAL_UART_MspInit+0x74>)
 8001746:	699b      	ldr	r3, [r3, #24]
 8001748:	4a0d      	ldr	r2, [pc, #52]	; (8001780 <HAL_UART_MspInit+0x74>)
 800174a:	f043 0304 	orr.w	r3, r3, #4
 800174e:	6193      	str	r3, [r2, #24]
 8001750:	4b0b      	ldr	r3, [pc, #44]	; (8001780 <HAL_UART_MspInit+0x74>)
 8001752:	699b      	ldr	r3, [r3, #24]
 8001754:	f003 0304 	and.w	r3, r3, #4
 8001758:	60bb      	str	r3, [r7, #8]
 800175a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800175c:	230c      	movs	r3, #12
 800175e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001760:	2302      	movs	r3, #2
 8001762:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001764:	2302      	movs	r3, #2
 8001766:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001768:	f107 0310 	add.w	r3, r7, #16
 800176c:	4619      	mov	r1, r3
 800176e:	4805      	ldr	r0, [pc, #20]	; (8001784 <HAL_UART_MspInit+0x78>)
 8001770:	f000 f9c4 	bl	8001afc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001774:	bf00      	nop
 8001776:	3720      	adds	r7, #32
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	40004400 	.word	0x40004400
 8001780:	40021000 	.word	0x40021000
 8001784:	40010800 	.word	0x40010800

08001788 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001788:	f7ff ff8f 	bl	80016aa <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800178c:	480b      	ldr	r0, [pc, #44]	; (80017bc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800178e:	490c      	ldr	r1, [pc, #48]	; (80017c0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001790:	4a0c      	ldr	r2, [pc, #48]	; (80017c4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001792:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001794:	e002      	b.n	800179c <LoopCopyDataInit>

08001796 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001796:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001798:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800179a:	3304      	adds	r3, #4

0800179c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800179c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800179e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017a0:	d3f9      	bcc.n	8001796 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017a2:	4a09      	ldr	r2, [pc, #36]	; (80017c8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80017a4:	4c09      	ldr	r4, [pc, #36]	; (80017cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017a8:	e001      	b.n	80017ae <LoopFillZerobss>

080017aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017ac:	3204      	adds	r2, #4

080017ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017b0:	d3fb      	bcc.n	80017aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017b2:	f001 fac5 	bl	8002d40 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017b6:	f7fe fd5f 	bl	8000278 <main>
  bx lr
 80017ba:	4770      	bx	lr
  ldr r0, =_sdata
 80017bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017c0:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 80017c4:	0800d680 	.word	0x0800d680
  ldr r2, =_sbss
 80017c8:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 80017cc:	200000e4 	.word	0x200000e4

080017d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017d0:	e7fe      	b.n	80017d0 <ADC1_2_IRQHandler>
	...

080017d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017d8:	4b08      	ldr	r3, [pc, #32]	; (80017fc <HAL_Init+0x28>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a07      	ldr	r2, [pc, #28]	; (80017fc <HAL_Init+0x28>)
 80017de:	f043 0310 	orr.w	r3, r3, #16
 80017e2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017e4:	2003      	movs	r0, #3
 80017e6:	f000 f947 	bl	8001a78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017ea:	2000      	movs	r0, #0
 80017ec:	f000 f808 	bl	8001800 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017f0:	f7ff fefa 	bl	80015e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017f4:	2300      	movs	r3, #0
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	40022000 	.word	0x40022000

08001800 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001808:	4b12      	ldr	r3, [pc, #72]	; (8001854 <HAL_InitTick+0x54>)
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	4b12      	ldr	r3, [pc, #72]	; (8001858 <HAL_InitTick+0x58>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	4619      	mov	r1, r3
 8001812:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001816:	fbb3 f3f1 	udiv	r3, r3, r1
 800181a:	fbb2 f3f3 	udiv	r3, r2, r3
 800181e:	4618      	mov	r0, r3
 8001820:	f000 f95f 	bl	8001ae2 <HAL_SYSTICK_Config>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e00e      	b.n	800184c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2b0f      	cmp	r3, #15
 8001832:	d80a      	bhi.n	800184a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001834:	2200      	movs	r2, #0
 8001836:	6879      	ldr	r1, [r7, #4]
 8001838:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800183c:	f000 f927 	bl	8001a8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001840:	4a06      	ldr	r2, [pc, #24]	; (800185c <HAL_InitTick+0x5c>)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001846:	2300      	movs	r3, #0
 8001848:	e000      	b.n	800184c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
}
 800184c:	4618      	mov	r0, r3
 800184e:	3708      	adds	r7, #8
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	20000018 	.word	0x20000018
 8001858:	20000020 	.word	0x20000020
 800185c:	2000001c 	.word	0x2000001c

08001860 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001864:	4b05      	ldr	r3, [pc, #20]	; (800187c <HAL_IncTick+0x1c>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	461a      	mov	r2, r3
 800186a:	4b05      	ldr	r3, [pc, #20]	; (8001880 <HAL_IncTick+0x20>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4413      	add	r3, r2
 8001870:	4a03      	ldr	r2, [pc, #12]	; (8001880 <HAL_IncTick+0x20>)
 8001872:	6013      	str	r3, [r2, #0]
}
 8001874:	bf00      	nop
 8001876:	46bd      	mov	sp, r7
 8001878:	bc80      	pop	{r7}
 800187a:	4770      	bx	lr
 800187c:	20000020 	.word	0x20000020
 8001880:	200000e0 	.word	0x200000e0

08001884 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  return uwTick;
 8001888:	4b02      	ldr	r3, [pc, #8]	; (8001894 <HAL_GetTick+0x10>)
 800188a:	681b      	ldr	r3, [r3, #0]
}
 800188c:	4618      	mov	r0, r3
 800188e:	46bd      	mov	sp, r7
 8001890:	bc80      	pop	{r7}
 8001892:	4770      	bx	lr
 8001894:	200000e0 	.word	0x200000e0

08001898 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018a0:	f7ff fff0 	bl	8001884 <HAL_GetTick>
 80018a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80018b0:	d005      	beq.n	80018be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018b2:	4b0a      	ldr	r3, [pc, #40]	; (80018dc <HAL_Delay+0x44>)
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	461a      	mov	r2, r3
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	4413      	add	r3, r2
 80018bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018be:	bf00      	nop
 80018c0:	f7ff ffe0 	bl	8001884 <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	68fa      	ldr	r2, [r7, #12]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d8f7      	bhi.n	80018c0 <HAL_Delay+0x28>
  {
  }
}
 80018d0:	bf00      	nop
 80018d2:	bf00      	nop
 80018d4:	3710      	adds	r7, #16
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	20000020 	.word	0x20000020

080018e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f003 0307 	and.w	r3, r3, #7
 80018ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018f0:	4b0c      	ldr	r3, [pc, #48]	; (8001924 <__NVIC_SetPriorityGrouping+0x44>)
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018f6:	68ba      	ldr	r2, [r7, #8]
 80018f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018fc:	4013      	ands	r3, r2
 80018fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001908:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800190c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001910:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001912:	4a04      	ldr	r2, [pc, #16]	; (8001924 <__NVIC_SetPriorityGrouping+0x44>)
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	60d3      	str	r3, [r2, #12]
}
 8001918:	bf00      	nop
 800191a:	3714      	adds	r7, #20
 800191c:	46bd      	mov	sp, r7
 800191e:	bc80      	pop	{r7}
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	e000ed00 	.word	0xe000ed00

08001928 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800192c:	4b04      	ldr	r3, [pc, #16]	; (8001940 <__NVIC_GetPriorityGrouping+0x18>)
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	0a1b      	lsrs	r3, r3, #8
 8001932:	f003 0307 	and.w	r3, r3, #7
}
 8001936:	4618      	mov	r0, r3
 8001938:	46bd      	mov	sp, r7
 800193a:	bc80      	pop	{r7}
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	e000ed00 	.word	0xe000ed00

08001944 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	4603      	mov	r3, r0
 800194c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800194e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001952:	2b00      	cmp	r3, #0
 8001954:	db0b      	blt.n	800196e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001956:	79fb      	ldrb	r3, [r7, #7]
 8001958:	f003 021f 	and.w	r2, r3, #31
 800195c:	4906      	ldr	r1, [pc, #24]	; (8001978 <__NVIC_EnableIRQ+0x34>)
 800195e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001962:	095b      	lsrs	r3, r3, #5
 8001964:	2001      	movs	r0, #1
 8001966:	fa00 f202 	lsl.w	r2, r0, r2
 800196a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800196e:	bf00      	nop
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	bc80      	pop	{r7}
 8001976:	4770      	bx	lr
 8001978:	e000e100 	.word	0xe000e100

0800197c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	4603      	mov	r3, r0
 8001984:	6039      	str	r1, [r7, #0]
 8001986:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198c:	2b00      	cmp	r3, #0
 800198e:	db0a      	blt.n	80019a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	b2da      	uxtb	r2, r3
 8001994:	490c      	ldr	r1, [pc, #48]	; (80019c8 <__NVIC_SetPriority+0x4c>)
 8001996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199a:	0112      	lsls	r2, r2, #4
 800199c:	b2d2      	uxtb	r2, r2
 800199e:	440b      	add	r3, r1
 80019a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019a4:	e00a      	b.n	80019bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	b2da      	uxtb	r2, r3
 80019aa:	4908      	ldr	r1, [pc, #32]	; (80019cc <__NVIC_SetPriority+0x50>)
 80019ac:	79fb      	ldrb	r3, [r7, #7]
 80019ae:	f003 030f 	and.w	r3, r3, #15
 80019b2:	3b04      	subs	r3, #4
 80019b4:	0112      	lsls	r2, r2, #4
 80019b6:	b2d2      	uxtb	r2, r2
 80019b8:	440b      	add	r3, r1
 80019ba:	761a      	strb	r2, [r3, #24]
}
 80019bc:	bf00      	nop
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bc80      	pop	{r7}
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	e000e100 	.word	0xe000e100
 80019cc:	e000ed00 	.word	0xe000ed00

080019d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b089      	sub	sp, #36	; 0x24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	60f8      	str	r0, [r7, #12]
 80019d8:	60b9      	str	r1, [r7, #8]
 80019da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	f003 0307 	and.w	r3, r3, #7
 80019e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	f1c3 0307 	rsb	r3, r3, #7
 80019ea:	2b04      	cmp	r3, #4
 80019ec:	bf28      	it	cs
 80019ee:	2304      	movcs	r3, #4
 80019f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	3304      	adds	r3, #4
 80019f6:	2b06      	cmp	r3, #6
 80019f8:	d902      	bls.n	8001a00 <NVIC_EncodePriority+0x30>
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	3b03      	subs	r3, #3
 80019fe:	e000      	b.n	8001a02 <NVIC_EncodePriority+0x32>
 8001a00:	2300      	movs	r3, #0
 8001a02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0e:	43da      	mvns	r2, r3
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	401a      	ands	r2, r3
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a18:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a22:	43d9      	mvns	r1, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a28:	4313      	orrs	r3, r2
         );
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3724      	adds	r7, #36	; 0x24
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bc80      	pop	{r7}
 8001a32:	4770      	bx	lr

08001a34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	3b01      	subs	r3, #1
 8001a40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a44:	d301      	bcc.n	8001a4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a46:	2301      	movs	r3, #1
 8001a48:	e00f      	b.n	8001a6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a4a:	4a0a      	ldr	r2, [pc, #40]	; (8001a74 <SysTick_Config+0x40>)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	3b01      	subs	r3, #1
 8001a50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a52:	210f      	movs	r1, #15
 8001a54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a58:	f7ff ff90 	bl	800197c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a5c:	4b05      	ldr	r3, [pc, #20]	; (8001a74 <SysTick_Config+0x40>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a62:	4b04      	ldr	r3, [pc, #16]	; (8001a74 <SysTick_Config+0x40>)
 8001a64:	2207      	movs	r2, #7
 8001a66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a68:	2300      	movs	r3, #0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	e000e010 	.word	0xe000e010

08001a78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f7ff ff2d 	bl	80018e0 <__NVIC_SetPriorityGrouping>
}
 8001a86:	bf00      	nop
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}

08001a8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	b086      	sub	sp, #24
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	4603      	mov	r3, r0
 8001a96:	60b9      	str	r1, [r7, #8]
 8001a98:	607a      	str	r2, [r7, #4]
 8001a9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001aa0:	f7ff ff42 	bl	8001928 <__NVIC_GetPriorityGrouping>
 8001aa4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	68b9      	ldr	r1, [r7, #8]
 8001aaa:	6978      	ldr	r0, [r7, #20]
 8001aac:	f7ff ff90 	bl	80019d0 <NVIC_EncodePriority>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ab6:	4611      	mov	r1, r2
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7ff ff5f 	bl	800197c <__NVIC_SetPriority>
}
 8001abe:	bf00      	nop
 8001ac0:	3718      	adds	r7, #24
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}

08001ac6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	b082      	sub	sp, #8
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	4603      	mov	r3, r0
 8001ace:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ad0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7ff ff35 	bl	8001944 <__NVIC_EnableIRQ>
}
 8001ada:	bf00      	nop
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}

08001ae2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b082      	sub	sp, #8
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f7ff ffa2 	bl	8001a34 <SysTick_Config>
 8001af0:	4603      	mov	r3, r0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
	...

08001afc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b08b      	sub	sp, #44	; 0x2c
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b06:	2300      	movs	r3, #0
 8001b08:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b0e:	e169      	b.n	8001de4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b10:	2201      	movs	r2, #1
 8001b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	69fa      	ldr	r2, [r7, #28]
 8001b20:	4013      	ands	r3, r2
 8001b22:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	f040 8158 	bne.w	8001dde <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	4a9a      	ldr	r2, [pc, #616]	; (8001d9c <HAL_GPIO_Init+0x2a0>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d05e      	beq.n	8001bf6 <HAL_GPIO_Init+0xfa>
 8001b38:	4a98      	ldr	r2, [pc, #608]	; (8001d9c <HAL_GPIO_Init+0x2a0>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d875      	bhi.n	8001c2a <HAL_GPIO_Init+0x12e>
 8001b3e:	4a98      	ldr	r2, [pc, #608]	; (8001da0 <HAL_GPIO_Init+0x2a4>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d058      	beq.n	8001bf6 <HAL_GPIO_Init+0xfa>
 8001b44:	4a96      	ldr	r2, [pc, #600]	; (8001da0 <HAL_GPIO_Init+0x2a4>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d86f      	bhi.n	8001c2a <HAL_GPIO_Init+0x12e>
 8001b4a:	4a96      	ldr	r2, [pc, #600]	; (8001da4 <HAL_GPIO_Init+0x2a8>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d052      	beq.n	8001bf6 <HAL_GPIO_Init+0xfa>
 8001b50:	4a94      	ldr	r2, [pc, #592]	; (8001da4 <HAL_GPIO_Init+0x2a8>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d869      	bhi.n	8001c2a <HAL_GPIO_Init+0x12e>
 8001b56:	4a94      	ldr	r2, [pc, #592]	; (8001da8 <HAL_GPIO_Init+0x2ac>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d04c      	beq.n	8001bf6 <HAL_GPIO_Init+0xfa>
 8001b5c:	4a92      	ldr	r2, [pc, #584]	; (8001da8 <HAL_GPIO_Init+0x2ac>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d863      	bhi.n	8001c2a <HAL_GPIO_Init+0x12e>
 8001b62:	4a92      	ldr	r2, [pc, #584]	; (8001dac <HAL_GPIO_Init+0x2b0>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d046      	beq.n	8001bf6 <HAL_GPIO_Init+0xfa>
 8001b68:	4a90      	ldr	r2, [pc, #576]	; (8001dac <HAL_GPIO_Init+0x2b0>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d85d      	bhi.n	8001c2a <HAL_GPIO_Init+0x12e>
 8001b6e:	2b12      	cmp	r3, #18
 8001b70:	d82a      	bhi.n	8001bc8 <HAL_GPIO_Init+0xcc>
 8001b72:	2b12      	cmp	r3, #18
 8001b74:	d859      	bhi.n	8001c2a <HAL_GPIO_Init+0x12e>
 8001b76:	a201      	add	r2, pc, #4	; (adr r2, 8001b7c <HAL_GPIO_Init+0x80>)
 8001b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b7c:	08001bf7 	.word	0x08001bf7
 8001b80:	08001bd1 	.word	0x08001bd1
 8001b84:	08001be3 	.word	0x08001be3
 8001b88:	08001c25 	.word	0x08001c25
 8001b8c:	08001c2b 	.word	0x08001c2b
 8001b90:	08001c2b 	.word	0x08001c2b
 8001b94:	08001c2b 	.word	0x08001c2b
 8001b98:	08001c2b 	.word	0x08001c2b
 8001b9c:	08001c2b 	.word	0x08001c2b
 8001ba0:	08001c2b 	.word	0x08001c2b
 8001ba4:	08001c2b 	.word	0x08001c2b
 8001ba8:	08001c2b 	.word	0x08001c2b
 8001bac:	08001c2b 	.word	0x08001c2b
 8001bb0:	08001c2b 	.word	0x08001c2b
 8001bb4:	08001c2b 	.word	0x08001c2b
 8001bb8:	08001c2b 	.word	0x08001c2b
 8001bbc:	08001c2b 	.word	0x08001c2b
 8001bc0:	08001bd9 	.word	0x08001bd9
 8001bc4:	08001bed 	.word	0x08001bed
 8001bc8:	4a79      	ldr	r2, [pc, #484]	; (8001db0 <HAL_GPIO_Init+0x2b4>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d013      	beq.n	8001bf6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001bce:	e02c      	b.n	8001c2a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	623b      	str	r3, [r7, #32]
          break;
 8001bd6:	e029      	b.n	8001c2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	3304      	adds	r3, #4
 8001bde:	623b      	str	r3, [r7, #32]
          break;
 8001be0:	e024      	b.n	8001c2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	68db      	ldr	r3, [r3, #12]
 8001be6:	3308      	adds	r3, #8
 8001be8:	623b      	str	r3, [r7, #32]
          break;
 8001bea:	e01f      	b.n	8001c2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	330c      	adds	r3, #12
 8001bf2:	623b      	str	r3, [r7, #32]
          break;
 8001bf4:	e01a      	b.n	8001c2c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d102      	bne.n	8001c04 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001bfe:	2304      	movs	r3, #4
 8001c00:	623b      	str	r3, [r7, #32]
          break;
 8001c02:	e013      	b.n	8001c2c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d105      	bne.n	8001c18 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c0c:	2308      	movs	r3, #8
 8001c0e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	69fa      	ldr	r2, [r7, #28]
 8001c14:	611a      	str	r2, [r3, #16]
          break;
 8001c16:	e009      	b.n	8001c2c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c18:	2308      	movs	r3, #8
 8001c1a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	69fa      	ldr	r2, [r7, #28]
 8001c20:	615a      	str	r2, [r3, #20]
          break;
 8001c22:	e003      	b.n	8001c2c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c24:	2300      	movs	r3, #0
 8001c26:	623b      	str	r3, [r7, #32]
          break;
 8001c28:	e000      	b.n	8001c2c <HAL_GPIO_Init+0x130>
          break;
 8001c2a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c2c:	69bb      	ldr	r3, [r7, #24]
 8001c2e:	2bff      	cmp	r3, #255	; 0xff
 8001c30:	d801      	bhi.n	8001c36 <HAL_GPIO_Init+0x13a>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	e001      	b.n	8001c3a <HAL_GPIO_Init+0x13e>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	3304      	adds	r3, #4
 8001c3a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c3c:	69bb      	ldr	r3, [r7, #24]
 8001c3e:	2bff      	cmp	r3, #255	; 0xff
 8001c40:	d802      	bhi.n	8001c48 <HAL_GPIO_Init+0x14c>
 8001c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	e002      	b.n	8001c4e <HAL_GPIO_Init+0x152>
 8001c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4a:	3b08      	subs	r3, #8
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	210f      	movs	r1, #15
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	fa01 f303 	lsl.w	r3, r1, r3
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	401a      	ands	r2, r3
 8001c60:	6a39      	ldr	r1, [r7, #32]
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	fa01 f303 	lsl.w	r3, r1, r3
 8001c68:	431a      	orrs	r2, r3
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	f000 80b1 	beq.w	8001dde <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c7c:	4b4d      	ldr	r3, [pc, #308]	; (8001db4 <HAL_GPIO_Init+0x2b8>)
 8001c7e:	699b      	ldr	r3, [r3, #24]
 8001c80:	4a4c      	ldr	r2, [pc, #304]	; (8001db4 <HAL_GPIO_Init+0x2b8>)
 8001c82:	f043 0301 	orr.w	r3, r3, #1
 8001c86:	6193      	str	r3, [r2, #24]
 8001c88:	4b4a      	ldr	r3, [pc, #296]	; (8001db4 <HAL_GPIO_Init+0x2b8>)
 8001c8a:	699b      	ldr	r3, [r3, #24]
 8001c8c:	f003 0301 	and.w	r3, r3, #1
 8001c90:	60bb      	str	r3, [r7, #8]
 8001c92:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c94:	4a48      	ldr	r2, [pc, #288]	; (8001db8 <HAL_GPIO_Init+0x2bc>)
 8001c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c98:	089b      	lsrs	r3, r3, #2
 8001c9a:	3302      	adds	r3, #2
 8001c9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ca0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca4:	f003 0303 	and.w	r3, r3, #3
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	220f      	movs	r2, #15
 8001cac:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb0:	43db      	mvns	r3, r3
 8001cb2:	68fa      	ldr	r2, [r7, #12]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	4a40      	ldr	r2, [pc, #256]	; (8001dbc <HAL_GPIO_Init+0x2c0>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d013      	beq.n	8001ce8 <HAL_GPIO_Init+0x1ec>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	4a3f      	ldr	r2, [pc, #252]	; (8001dc0 <HAL_GPIO_Init+0x2c4>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d00d      	beq.n	8001ce4 <HAL_GPIO_Init+0x1e8>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	4a3e      	ldr	r2, [pc, #248]	; (8001dc4 <HAL_GPIO_Init+0x2c8>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d007      	beq.n	8001ce0 <HAL_GPIO_Init+0x1e4>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	4a3d      	ldr	r2, [pc, #244]	; (8001dc8 <HAL_GPIO_Init+0x2cc>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d101      	bne.n	8001cdc <HAL_GPIO_Init+0x1e0>
 8001cd8:	2303      	movs	r3, #3
 8001cda:	e006      	b.n	8001cea <HAL_GPIO_Init+0x1ee>
 8001cdc:	2304      	movs	r3, #4
 8001cde:	e004      	b.n	8001cea <HAL_GPIO_Init+0x1ee>
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	e002      	b.n	8001cea <HAL_GPIO_Init+0x1ee>
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e000      	b.n	8001cea <HAL_GPIO_Init+0x1ee>
 8001ce8:	2300      	movs	r3, #0
 8001cea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cec:	f002 0203 	and.w	r2, r2, #3
 8001cf0:	0092      	lsls	r2, r2, #2
 8001cf2:	4093      	lsls	r3, r2
 8001cf4:	68fa      	ldr	r2, [r7, #12]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001cfa:	492f      	ldr	r1, [pc, #188]	; (8001db8 <HAL_GPIO_Init+0x2bc>)
 8001cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfe:	089b      	lsrs	r3, r3, #2
 8001d00:	3302      	adds	r3, #2
 8001d02:	68fa      	ldr	r2, [r7, #12]
 8001d04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d006      	beq.n	8001d22 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d14:	4b2d      	ldr	r3, [pc, #180]	; (8001dcc <HAL_GPIO_Init+0x2d0>)
 8001d16:	689a      	ldr	r2, [r3, #8]
 8001d18:	492c      	ldr	r1, [pc, #176]	; (8001dcc <HAL_GPIO_Init+0x2d0>)
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	608b      	str	r3, [r1, #8]
 8001d20:	e006      	b.n	8001d30 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d22:	4b2a      	ldr	r3, [pc, #168]	; (8001dcc <HAL_GPIO_Init+0x2d0>)
 8001d24:	689a      	ldr	r2, [r3, #8]
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	43db      	mvns	r3, r3
 8001d2a:	4928      	ldr	r1, [pc, #160]	; (8001dcc <HAL_GPIO_Init+0x2d0>)
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d006      	beq.n	8001d4a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d3c:	4b23      	ldr	r3, [pc, #140]	; (8001dcc <HAL_GPIO_Init+0x2d0>)
 8001d3e:	68da      	ldr	r2, [r3, #12]
 8001d40:	4922      	ldr	r1, [pc, #136]	; (8001dcc <HAL_GPIO_Init+0x2d0>)
 8001d42:	69bb      	ldr	r3, [r7, #24]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	60cb      	str	r3, [r1, #12]
 8001d48:	e006      	b.n	8001d58 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d4a:	4b20      	ldr	r3, [pc, #128]	; (8001dcc <HAL_GPIO_Init+0x2d0>)
 8001d4c:	68da      	ldr	r2, [r3, #12]
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	43db      	mvns	r3, r3
 8001d52:	491e      	ldr	r1, [pc, #120]	; (8001dcc <HAL_GPIO_Init+0x2d0>)
 8001d54:	4013      	ands	r3, r2
 8001d56:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d006      	beq.n	8001d72 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d64:	4b19      	ldr	r3, [pc, #100]	; (8001dcc <HAL_GPIO_Init+0x2d0>)
 8001d66:	685a      	ldr	r2, [r3, #4]
 8001d68:	4918      	ldr	r1, [pc, #96]	; (8001dcc <HAL_GPIO_Init+0x2d0>)
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	604b      	str	r3, [r1, #4]
 8001d70:	e006      	b.n	8001d80 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d72:	4b16      	ldr	r3, [pc, #88]	; (8001dcc <HAL_GPIO_Init+0x2d0>)
 8001d74:	685a      	ldr	r2, [r3, #4]
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	43db      	mvns	r3, r3
 8001d7a:	4914      	ldr	r1, [pc, #80]	; (8001dcc <HAL_GPIO_Init+0x2d0>)
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d021      	beq.n	8001dd0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d8c:	4b0f      	ldr	r3, [pc, #60]	; (8001dcc <HAL_GPIO_Init+0x2d0>)
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	490e      	ldr	r1, [pc, #56]	; (8001dcc <HAL_GPIO_Init+0x2d0>)
 8001d92:	69bb      	ldr	r3, [r7, #24]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	600b      	str	r3, [r1, #0]
 8001d98:	e021      	b.n	8001dde <HAL_GPIO_Init+0x2e2>
 8001d9a:	bf00      	nop
 8001d9c:	10320000 	.word	0x10320000
 8001da0:	10310000 	.word	0x10310000
 8001da4:	10220000 	.word	0x10220000
 8001da8:	10210000 	.word	0x10210000
 8001dac:	10120000 	.word	0x10120000
 8001db0:	10110000 	.word	0x10110000
 8001db4:	40021000 	.word	0x40021000
 8001db8:	40010000 	.word	0x40010000
 8001dbc:	40010800 	.word	0x40010800
 8001dc0:	40010c00 	.word	0x40010c00
 8001dc4:	40011000 	.word	0x40011000
 8001dc8:	40011400 	.word	0x40011400
 8001dcc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001dd0:	4b0b      	ldr	r3, [pc, #44]	; (8001e00 <HAL_GPIO_Init+0x304>)
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	43db      	mvns	r3, r3
 8001dd8:	4909      	ldr	r1, [pc, #36]	; (8001e00 <HAL_GPIO_Init+0x304>)
 8001dda:	4013      	ands	r3, r2
 8001ddc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de0:	3301      	adds	r3, #1
 8001de2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dea:	fa22 f303 	lsr.w	r3, r2, r3
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	f47f ae8e 	bne.w	8001b10 <HAL_GPIO_Init+0x14>
  }
}
 8001df4:	bf00      	nop
 8001df6:	bf00      	nop
 8001df8:	372c      	adds	r7, #44	; 0x2c
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bc80      	pop	{r7}
 8001dfe:	4770      	bx	lr
 8001e00:	40010400 	.word	0x40010400

08001e04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	807b      	strh	r3, [r7, #2]
 8001e10:	4613      	mov	r3, r2
 8001e12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e14:	787b      	ldrb	r3, [r7, #1]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d003      	beq.n	8001e22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e1a:	887a      	ldrh	r2, [r7, #2]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e20:	e003      	b.n	8001e2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e22:	887b      	ldrh	r3, [r7, #2]
 8001e24:	041a      	lsls	r2, r3, #16
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	611a      	str	r2, [r3, #16]
}
 8001e2a:	bf00      	nop
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bc80      	pop	{r7}
 8001e32:	4770      	bx	lr

08001e34 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001e3e:	4b08      	ldr	r3, [pc, #32]	; (8001e60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e40:	695a      	ldr	r2, [r3, #20]
 8001e42:	88fb      	ldrh	r3, [r7, #6]
 8001e44:	4013      	ands	r3, r2
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d006      	beq.n	8001e58 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e4a:	4a05      	ldr	r2, [pc, #20]	; (8001e60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e4c:	88fb      	ldrh	r3, [r7, #6]
 8001e4e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e50:	88fb      	ldrh	r3, [r7, #6]
 8001e52:	4618      	mov	r0, r3
 8001e54:	f000 f806 	bl	8001e64 <HAL_GPIO_EXTI_Callback>
  }
}
 8001e58:	bf00      	nop
 8001e5a:	3708      	adds	r7, #8
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	40010400 	.word	0x40010400

08001e64 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001e6e:	bf00      	nop
 8001e70:	370c      	adds	r7, #12
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bc80      	pop	{r7}
 8001e76:	4770      	bx	lr

08001e78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b086      	sub	sp, #24
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d101      	bne.n	8001e8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e272      	b.n	8002370 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	f000 8087 	beq.w	8001fa6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e98:	4b92      	ldr	r3, [pc, #584]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f003 030c 	and.w	r3, r3, #12
 8001ea0:	2b04      	cmp	r3, #4
 8001ea2:	d00c      	beq.n	8001ebe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ea4:	4b8f      	ldr	r3, [pc, #572]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f003 030c 	and.w	r3, r3, #12
 8001eac:	2b08      	cmp	r3, #8
 8001eae:	d112      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x5e>
 8001eb0:	4b8c      	ldr	r3, [pc, #560]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ebc:	d10b      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ebe:	4b89      	ldr	r3, [pc, #548]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d06c      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x12c>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d168      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e24c      	b.n	8002370 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ede:	d106      	bne.n	8001eee <HAL_RCC_OscConfig+0x76>
 8001ee0:	4b80      	ldr	r3, [pc, #512]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a7f      	ldr	r2, [pc, #508]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001ee6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eea:	6013      	str	r3, [r2, #0]
 8001eec:	e02e      	b.n	8001f4c <HAL_RCC_OscConfig+0xd4>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d10c      	bne.n	8001f10 <HAL_RCC_OscConfig+0x98>
 8001ef6:	4b7b      	ldr	r3, [pc, #492]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a7a      	ldr	r2, [pc, #488]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001efc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f00:	6013      	str	r3, [r2, #0]
 8001f02:	4b78      	ldr	r3, [pc, #480]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a77      	ldr	r2, [pc, #476]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001f08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f0c:	6013      	str	r3, [r2, #0]
 8001f0e:	e01d      	b.n	8001f4c <HAL_RCC_OscConfig+0xd4>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f18:	d10c      	bne.n	8001f34 <HAL_RCC_OscConfig+0xbc>
 8001f1a:	4b72      	ldr	r3, [pc, #456]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a71      	ldr	r2, [pc, #452]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001f20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f24:	6013      	str	r3, [r2, #0]
 8001f26:	4b6f      	ldr	r3, [pc, #444]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a6e      	ldr	r2, [pc, #440]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001f2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f30:	6013      	str	r3, [r2, #0]
 8001f32:	e00b      	b.n	8001f4c <HAL_RCC_OscConfig+0xd4>
 8001f34:	4b6b      	ldr	r3, [pc, #428]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a6a      	ldr	r2, [pc, #424]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001f3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f3e:	6013      	str	r3, [r2, #0]
 8001f40:	4b68      	ldr	r3, [pc, #416]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a67      	ldr	r2, [pc, #412]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001f46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f4a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d013      	beq.n	8001f7c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f54:	f7ff fc96 	bl	8001884 <HAL_GetTick>
 8001f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f5a:	e008      	b.n	8001f6e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f5c:	f7ff fc92 	bl	8001884 <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	2b64      	cmp	r3, #100	; 0x64
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e200      	b.n	8002370 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f6e:	4b5d      	ldr	r3, [pc, #372]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d0f0      	beq.n	8001f5c <HAL_RCC_OscConfig+0xe4>
 8001f7a:	e014      	b.n	8001fa6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f7c:	f7ff fc82 	bl	8001884 <HAL_GetTick>
 8001f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f82:	e008      	b.n	8001f96 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f84:	f7ff fc7e 	bl	8001884 <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	2b64      	cmp	r3, #100	; 0x64
 8001f90:	d901      	bls.n	8001f96 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e1ec      	b.n	8002370 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f96:	4b53      	ldr	r3, [pc, #332]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d1f0      	bne.n	8001f84 <HAL_RCC_OscConfig+0x10c>
 8001fa2:	e000      	b.n	8001fa6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fa4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0302 	and.w	r3, r3, #2
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d063      	beq.n	800207a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fb2:	4b4c      	ldr	r3, [pc, #304]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f003 030c 	and.w	r3, r3, #12
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d00b      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001fbe:	4b49      	ldr	r3, [pc, #292]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f003 030c 	and.w	r3, r3, #12
 8001fc6:	2b08      	cmp	r3, #8
 8001fc8:	d11c      	bne.n	8002004 <HAL_RCC_OscConfig+0x18c>
 8001fca:	4b46      	ldr	r3, [pc, #280]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d116      	bne.n	8002004 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fd6:	4b43      	ldr	r3, [pc, #268]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d005      	beq.n	8001fee <HAL_RCC_OscConfig+0x176>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	691b      	ldr	r3, [r3, #16]
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d001      	beq.n	8001fee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e1c0      	b.n	8002370 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fee:	4b3d      	ldr	r3, [pc, #244]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	695b      	ldr	r3, [r3, #20]
 8001ffa:	00db      	lsls	r3, r3, #3
 8001ffc:	4939      	ldr	r1, [pc, #228]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001ffe:	4313      	orrs	r3, r2
 8002000:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002002:	e03a      	b.n	800207a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	691b      	ldr	r3, [r3, #16]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d020      	beq.n	800204e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800200c:	4b36      	ldr	r3, [pc, #216]	; (80020e8 <HAL_RCC_OscConfig+0x270>)
 800200e:	2201      	movs	r2, #1
 8002010:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002012:	f7ff fc37 	bl	8001884 <HAL_GetTick>
 8002016:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002018:	e008      	b.n	800202c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800201a:	f7ff fc33 	bl	8001884 <HAL_GetTick>
 800201e:	4602      	mov	r2, r0
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	2b02      	cmp	r3, #2
 8002026:	d901      	bls.n	800202c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e1a1      	b.n	8002370 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800202c:	4b2d      	ldr	r3, [pc, #180]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0302 	and.w	r3, r3, #2
 8002034:	2b00      	cmp	r3, #0
 8002036:	d0f0      	beq.n	800201a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002038:	4b2a      	ldr	r3, [pc, #168]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	695b      	ldr	r3, [r3, #20]
 8002044:	00db      	lsls	r3, r3, #3
 8002046:	4927      	ldr	r1, [pc, #156]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8002048:	4313      	orrs	r3, r2
 800204a:	600b      	str	r3, [r1, #0]
 800204c:	e015      	b.n	800207a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800204e:	4b26      	ldr	r3, [pc, #152]	; (80020e8 <HAL_RCC_OscConfig+0x270>)
 8002050:	2200      	movs	r2, #0
 8002052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002054:	f7ff fc16 	bl	8001884 <HAL_GetTick>
 8002058:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800205a:	e008      	b.n	800206e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800205c:	f7ff fc12 	bl	8001884 <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b02      	cmp	r3, #2
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e180      	b.n	8002370 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800206e:	4b1d      	ldr	r3, [pc, #116]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0302 	and.w	r3, r3, #2
 8002076:	2b00      	cmp	r3, #0
 8002078:	d1f0      	bne.n	800205c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0308 	and.w	r3, r3, #8
 8002082:	2b00      	cmp	r3, #0
 8002084:	d03a      	beq.n	80020fc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	699b      	ldr	r3, [r3, #24]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d019      	beq.n	80020c2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800208e:	4b17      	ldr	r3, [pc, #92]	; (80020ec <HAL_RCC_OscConfig+0x274>)
 8002090:	2201      	movs	r2, #1
 8002092:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002094:	f7ff fbf6 	bl	8001884 <HAL_GetTick>
 8002098:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800209a:	e008      	b.n	80020ae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800209c:	f7ff fbf2 	bl	8001884 <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e160      	b.n	8002370 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020ae:	4b0d      	ldr	r3, [pc, #52]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 80020b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d0f0      	beq.n	800209c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80020ba:	2001      	movs	r0, #1
 80020bc:	f000 face 	bl	800265c <RCC_Delay>
 80020c0:	e01c      	b.n	80020fc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020c2:	4b0a      	ldr	r3, [pc, #40]	; (80020ec <HAL_RCC_OscConfig+0x274>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020c8:	f7ff fbdc 	bl	8001884 <HAL_GetTick>
 80020cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020ce:	e00f      	b.n	80020f0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020d0:	f7ff fbd8 	bl	8001884 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d908      	bls.n	80020f0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e146      	b.n	8002370 <HAL_RCC_OscConfig+0x4f8>
 80020e2:	bf00      	nop
 80020e4:	40021000 	.word	0x40021000
 80020e8:	42420000 	.word	0x42420000
 80020ec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020f0:	4b92      	ldr	r3, [pc, #584]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 80020f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f4:	f003 0302 	and.w	r3, r3, #2
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d1e9      	bne.n	80020d0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0304 	and.w	r3, r3, #4
 8002104:	2b00      	cmp	r3, #0
 8002106:	f000 80a6 	beq.w	8002256 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800210a:	2300      	movs	r3, #0
 800210c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800210e:	4b8b      	ldr	r3, [pc, #556]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 8002110:	69db      	ldr	r3, [r3, #28]
 8002112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d10d      	bne.n	8002136 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800211a:	4b88      	ldr	r3, [pc, #544]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 800211c:	69db      	ldr	r3, [r3, #28]
 800211e:	4a87      	ldr	r2, [pc, #540]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 8002120:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002124:	61d3      	str	r3, [r2, #28]
 8002126:	4b85      	ldr	r3, [pc, #532]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 8002128:	69db      	ldr	r3, [r3, #28]
 800212a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800212e:	60bb      	str	r3, [r7, #8]
 8002130:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002132:	2301      	movs	r3, #1
 8002134:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002136:	4b82      	ldr	r3, [pc, #520]	; (8002340 <HAL_RCC_OscConfig+0x4c8>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800213e:	2b00      	cmp	r3, #0
 8002140:	d118      	bne.n	8002174 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002142:	4b7f      	ldr	r3, [pc, #508]	; (8002340 <HAL_RCC_OscConfig+0x4c8>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a7e      	ldr	r2, [pc, #504]	; (8002340 <HAL_RCC_OscConfig+0x4c8>)
 8002148:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800214c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800214e:	f7ff fb99 	bl	8001884 <HAL_GetTick>
 8002152:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002154:	e008      	b.n	8002168 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002156:	f7ff fb95 	bl	8001884 <HAL_GetTick>
 800215a:	4602      	mov	r2, r0
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	2b64      	cmp	r3, #100	; 0x64
 8002162:	d901      	bls.n	8002168 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002164:	2303      	movs	r3, #3
 8002166:	e103      	b.n	8002370 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002168:	4b75      	ldr	r3, [pc, #468]	; (8002340 <HAL_RCC_OscConfig+0x4c8>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002170:	2b00      	cmp	r3, #0
 8002172:	d0f0      	beq.n	8002156 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	2b01      	cmp	r3, #1
 800217a:	d106      	bne.n	800218a <HAL_RCC_OscConfig+0x312>
 800217c:	4b6f      	ldr	r3, [pc, #444]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 800217e:	6a1b      	ldr	r3, [r3, #32]
 8002180:	4a6e      	ldr	r2, [pc, #440]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 8002182:	f043 0301 	orr.w	r3, r3, #1
 8002186:	6213      	str	r3, [r2, #32]
 8002188:	e02d      	b.n	80021e6 <HAL_RCC_OscConfig+0x36e>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d10c      	bne.n	80021ac <HAL_RCC_OscConfig+0x334>
 8002192:	4b6a      	ldr	r3, [pc, #424]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 8002194:	6a1b      	ldr	r3, [r3, #32]
 8002196:	4a69      	ldr	r2, [pc, #420]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 8002198:	f023 0301 	bic.w	r3, r3, #1
 800219c:	6213      	str	r3, [r2, #32]
 800219e:	4b67      	ldr	r3, [pc, #412]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 80021a0:	6a1b      	ldr	r3, [r3, #32]
 80021a2:	4a66      	ldr	r2, [pc, #408]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 80021a4:	f023 0304 	bic.w	r3, r3, #4
 80021a8:	6213      	str	r3, [r2, #32]
 80021aa:	e01c      	b.n	80021e6 <HAL_RCC_OscConfig+0x36e>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	2b05      	cmp	r3, #5
 80021b2:	d10c      	bne.n	80021ce <HAL_RCC_OscConfig+0x356>
 80021b4:	4b61      	ldr	r3, [pc, #388]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 80021b6:	6a1b      	ldr	r3, [r3, #32]
 80021b8:	4a60      	ldr	r2, [pc, #384]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 80021ba:	f043 0304 	orr.w	r3, r3, #4
 80021be:	6213      	str	r3, [r2, #32]
 80021c0:	4b5e      	ldr	r3, [pc, #376]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 80021c2:	6a1b      	ldr	r3, [r3, #32]
 80021c4:	4a5d      	ldr	r2, [pc, #372]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 80021c6:	f043 0301 	orr.w	r3, r3, #1
 80021ca:	6213      	str	r3, [r2, #32]
 80021cc:	e00b      	b.n	80021e6 <HAL_RCC_OscConfig+0x36e>
 80021ce:	4b5b      	ldr	r3, [pc, #364]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 80021d0:	6a1b      	ldr	r3, [r3, #32]
 80021d2:	4a5a      	ldr	r2, [pc, #360]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 80021d4:	f023 0301 	bic.w	r3, r3, #1
 80021d8:	6213      	str	r3, [r2, #32]
 80021da:	4b58      	ldr	r3, [pc, #352]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 80021dc:	6a1b      	ldr	r3, [r3, #32]
 80021de:	4a57      	ldr	r2, [pc, #348]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 80021e0:	f023 0304 	bic.w	r3, r3, #4
 80021e4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d015      	beq.n	800221a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ee:	f7ff fb49 	bl	8001884 <HAL_GetTick>
 80021f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021f4:	e00a      	b.n	800220c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021f6:	f7ff fb45 	bl	8001884 <HAL_GetTick>
 80021fa:	4602      	mov	r2, r0
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	f241 3288 	movw	r2, #5000	; 0x1388
 8002204:	4293      	cmp	r3, r2
 8002206:	d901      	bls.n	800220c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002208:	2303      	movs	r3, #3
 800220a:	e0b1      	b.n	8002370 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800220c:	4b4b      	ldr	r3, [pc, #300]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 800220e:	6a1b      	ldr	r3, [r3, #32]
 8002210:	f003 0302 	and.w	r3, r3, #2
 8002214:	2b00      	cmp	r3, #0
 8002216:	d0ee      	beq.n	80021f6 <HAL_RCC_OscConfig+0x37e>
 8002218:	e014      	b.n	8002244 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800221a:	f7ff fb33 	bl	8001884 <HAL_GetTick>
 800221e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002220:	e00a      	b.n	8002238 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002222:	f7ff fb2f 	bl	8001884 <HAL_GetTick>
 8002226:	4602      	mov	r2, r0
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002230:	4293      	cmp	r3, r2
 8002232:	d901      	bls.n	8002238 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002234:	2303      	movs	r3, #3
 8002236:	e09b      	b.n	8002370 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002238:	4b40      	ldr	r3, [pc, #256]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 800223a:	6a1b      	ldr	r3, [r3, #32]
 800223c:	f003 0302 	and.w	r3, r3, #2
 8002240:	2b00      	cmp	r3, #0
 8002242:	d1ee      	bne.n	8002222 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002244:	7dfb      	ldrb	r3, [r7, #23]
 8002246:	2b01      	cmp	r3, #1
 8002248:	d105      	bne.n	8002256 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800224a:	4b3c      	ldr	r3, [pc, #240]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 800224c:	69db      	ldr	r3, [r3, #28]
 800224e:	4a3b      	ldr	r2, [pc, #236]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 8002250:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002254:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	69db      	ldr	r3, [r3, #28]
 800225a:	2b00      	cmp	r3, #0
 800225c:	f000 8087 	beq.w	800236e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002260:	4b36      	ldr	r3, [pc, #216]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f003 030c 	and.w	r3, r3, #12
 8002268:	2b08      	cmp	r3, #8
 800226a:	d061      	beq.n	8002330 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	69db      	ldr	r3, [r3, #28]
 8002270:	2b02      	cmp	r3, #2
 8002272:	d146      	bne.n	8002302 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002274:	4b33      	ldr	r3, [pc, #204]	; (8002344 <HAL_RCC_OscConfig+0x4cc>)
 8002276:	2200      	movs	r2, #0
 8002278:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800227a:	f7ff fb03 	bl	8001884 <HAL_GetTick>
 800227e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002280:	e008      	b.n	8002294 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002282:	f7ff faff 	bl	8001884 <HAL_GetTick>
 8002286:	4602      	mov	r2, r0
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	2b02      	cmp	r3, #2
 800228e:	d901      	bls.n	8002294 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002290:	2303      	movs	r3, #3
 8002292:	e06d      	b.n	8002370 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002294:	4b29      	ldr	r3, [pc, #164]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800229c:	2b00      	cmp	r3, #0
 800229e:	d1f0      	bne.n	8002282 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6a1b      	ldr	r3, [r3, #32]
 80022a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022a8:	d108      	bne.n	80022bc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80022aa:	4b24      	ldr	r3, [pc, #144]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	4921      	ldr	r1, [pc, #132]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 80022b8:	4313      	orrs	r3, r2
 80022ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022bc:	4b1f      	ldr	r3, [pc, #124]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6a19      	ldr	r1, [r3, #32]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022cc:	430b      	orrs	r3, r1
 80022ce:	491b      	ldr	r1, [pc, #108]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 80022d0:	4313      	orrs	r3, r2
 80022d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022d4:	4b1b      	ldr	r3, [pc, #108]	; (8002344 <HAL_RCC_OscConfig+0x4cc>)
 80022d6:	2201      	movs	r2, #1
 80022d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022da:	f7ff fad3 	bl	8001884 <HAL_GetTick>
 80022de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022e0:	e008      	b.n	80022f4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022e2:	f7ff facf 	bl	8001884 <HAL_GetTick>
 80022e6:	4602      	mov	r2, r0
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d901      	bls.n	80022f4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80022f0:	2303      	movs	r3, #3
 80022f2:	e03d      	b.n	8002370 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022f4:	4b11      	ldr	r3, [pc, #68]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d0f0      	beq.n	80022e2 <HAL_RCC_OscConfig+0x46a>
 8002300:	e035      	b.n	800236e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002302:	4b10      	ldr	r3, [pc, #64]	; (8002344 <HAL_RCC_OscConfig+0x4cc>)
 8002304:	2200      	movs	r2, #0
 8002306:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002308:	f7ff fabc 	bl	8001884 <HAL_GetTick>
 800230c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800230e:	e008      	b.n	8002322 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002310:	f7ff fab8 	bl	8001884 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b02      	cmp	r3, #2
 800231c:	d901      	bls.n	8002322 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e026      	b.n	8002370 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002322:	4b06      	ldr	r3, [pc, #24]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d1f0      	bne.n	8002310 <HAL_RCC_OscConfig+0x498>
 800232e:	e01e      	b.n	800236e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	69db      	ldr	r3, [r3, #28]
 8002334:	2b01      	cmp	r3, #1
 8002336:	d107      	bne.n	8002348 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e019      	b.n	8002370 <HAL_RCC_OscConfig+0x4f8>
 800233c:	40021000 	.word	0x40021000
 8002340:	40007000 	.word	0x40007000
 8002344:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002348:	4b0b      	ldr	r3, [pc, #44]	; (8002378 <HAL_RCC_OscConfig+0x500>)
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6a1b      	ldr	r3, [r3, #32]
 8002358:	429a      	cmp	r2, r3
 800235a:	d106      	bne.n	800236a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002366:	429a      	cmp	r2, r3
 8002368:	d001      	beq.n	800236e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e000      	b.n	8002370 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800236e:	2300      	movs	r3, #0
}
 8002370:	4618      	mov	r0, r3
 8002372:	3718      	adds	r7, #24
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	40021000 	.word	0x40021000

0800237c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d101      	bne.n	8002390 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e0d0      	b.n	8002532 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002390:	4b6a      	ldr	r3, [pc, #424]	; (800253c <HAL_RCC_ClockConfig+0x1c0>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0307 	and.w	r3, r3, #7
 8002398:	683a      	ldr	r2, [r7, #0]
 800239a:	429a      	cmp	r2, r3
 800239c:	d910      	bls.n	80023c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800239e:	4b67      	ldr	r3, [pc, #412]	; (800253c <HAL_RCC_ClockConfig+0x1c0>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f023 0207 	bic.w	r2, r3, #7
 80023a6:	4965      	ldr	r1, [pc, #404]	; (800253c <HAL_RCC_ClockConfig+0x1c0>)
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ae:	4b63      	ldr	r3, [pc, #396]	; (800253c <HAL_RCC_ClockConfig+0x1c0>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0307 	and.w	r3, r3, #7
 80023b6:	683a      	ldr	r2, [r7, #0]
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d001      	beq.n	80023c0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e0b8      	b.n	8002532 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0302 	and.w	r3, r3, #2
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d020      	beq.n	800240e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0304 	and.w	r3, r3, #4
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d005      	beq.n	80023e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023d8:	4b59      	ldr	r3, [pc, #356]	; (8002540 <HAL_RCC_ClockConfig+0x1c4>)
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	4a58      	ldr	r2, [pc, #352]	; (8002540 <HAL_RCC_ClockConfig+0x1c4>)
 80023de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80023e2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0308 	and.w	r3, r3, #8
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d005      	beq.n	80023fc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023f0:	4b53      	ldr	r3, [pc, #332]	; (8002540 <HAL_RCC_ClockConfig+0x1c4>)
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	4a52      	ldr	r2, [pc, #328]	; (8002540 <HAL_RCC_ClockConfig+0x1c4>)
 80023f6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80023fa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023fc:	4b50      	ldr	r3, [pc, #320]	; (8002540 <HAL_RCC_ClockConfig+0x1c4>)
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	494d      	ldr	r1, [pc, #308]	; (8002540 <HAL_RCC_ClockConfig+0x1c4>)
 800240a:	4313      	orrs	r3, r2
 800240c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0301 	and.w	r3, r3, #1
 8002416:	2b00      	cmp	r3, #0
 8002418:	d040      	beq.n	800249c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	2b01      	cmp	r3, #1
 8002420:	d107      	bne.n	8002432 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002422:	4b47      	ldr	r3, [pc, #284]	; (8002540 <HAL_RCC_ClockConfig+0x1c4>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d115      	bne.n	800245a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e07f      	b.n	8002532 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	2b02      	cmp	r3, #2
 8002438:	d107      	bne.n	800244a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800243a:	4b41      	ldr	r3, [pc, #260]	; (8002540 <HAL_RCC_ClockConfig+0x1c4>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d109      	bne.n	800245a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e073      	b.n	8002532 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800244a:	4b3d      	ldr	r3, [pc, #244]	; (8002540 <HAL_RCC_ClockConfig+0x1c4>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0302 	and.w	r3, r3, #2
 8002452:	2b00      	cmp	r3, #0
 8002454:	d101      	bne.n	800245a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e06b      	b.n	8002532 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800245a:	4b39      	ldr	r3, [pc, #228]	; (8002540 <HAL_RCC_ClockConfig+0x1c4>)
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f023 0203 	bic.w	r2, r3, #3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	4936      	ldr	r1, [pc, #216]	; (8002540 <HAL_RCC_ClockConfig+0x1c4>)
 8002468:	4313      	orrs	r3, r2
 800246a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800246c:	f7ff fa0a 	bl	8001884 <HAL_GetTick>
 8002470:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002472:	e00a      	b.n	800248a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002474:	f7ff fa06 	bl	8001884 <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002482:	4293      	cmp	r3, r2
 8002484:	d901      	bls.n	800248a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e053      	b.n	8002532 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800248a:	4b2d      	ldr	r3, [pc, #180]	; (8002540 <HAL_RCC_ClockConfig+0x1c4>)
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f003 020c 	and.w	r2, r3, #12
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	429a      	cmp	r2, r3
 800249a:	d1eb      	bne.n	8002474 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800249c:	4b27      	ldr	r3, [pc, #156]	; (800253c <HAL_RCC_ClockConfig+0x1c0>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0307 	and.w	r3, r3, #7
 80024a4:	683a      	ldr	r2, [r7, #0]
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d210      	bcs.n	80024cc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024aa:	4b24      	ldr	r3, [pc, #144]	; (800253c <HAL_RCC_ClockConfig+0x1c0>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f023 0207 	bic.w	r2, r3, #7
 80024b2:	4922      	ldr	r1, [pc, #136]	; (800253c <HAL_RCC_ClockConfig+0x1c0>)
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ba:	4b20      	ldr	r3, [pc, #128]	; (800253c <HAL_RCC_ClockConfig+0x1c0>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0307 	and.w	r3, r3, #7
 80024c2:	683a      	ldr	r2, [r7, #0]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d001      	beq.n	80024cc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e032      	b.n	8002532 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0304 	and.w	r3, r3, #4
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d008      	beq.n	80024ea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024d8:	4b19      	ldr	r3, [pc, #100]	; (8002540 <HAL_RCC_ClockConfig+0x1c4>)
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	4916      	ldr	r1, [pc, #88]	; (8002540 <HAL_RCC_ClockConfig+0x1c4>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0308 	and.w	r3, r3, #8
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d009      	beq.n	800250a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024f6:	4b12      	ldr	r3, [pc, #72]	; (8002540 <HAL_RCC_ClockConfig+0x1c4>)
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	00db      	lsls	r3, r3, #3
 8002504:	490e      	ldr	r1, [pc, #56]	; (8002540 <HAL_RCC_ClockConfig+0x1c4>)
 8002506:	4313      	orrs	r3, r2
 8002508:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800250a:	f000 f821 	bl	8002550 <HAL_RCC_GetSysClockFreq>
 800250e:	4602      	mov	r2, r0
 8002510:	4b0b      	ldr	r3, [pc, #44]	; (8002540 <HAL_RCC_ClockConfig+0x1c4>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	091b      	lsrs	r3, r3, #4
 8002516:	f003 030f 	and.w	r3, r3, #15
 800251a:	490a      	ldr	r1, [pc, #40]	; (8002544 <HAL_RCC_ClockConfig+0x1c8>)
 800251c:	5ccb      	ldrb	r3, [r1, r3]
 800251e:	fa22 f303 	lsr.w	r3, r2, r3
 8002522:	4a09      	ldr	r2, [pc, #36]	; (8002548 <HAL_RCC_ClockConfig+0x1cc>)
 8002524:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002526:	4b09      	ldr	r3, [pc, #36]	; (800254c <HAL_RCC_ClockConfig+0x1d0>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4618      	mov	r0, r3
 800252c:	f7ff f968 	bl	8001800 <HAL_InitTick>

  return HAL_OK;
 8002530:	2300      	movs	r3, #0
}
 8002532:	4618      	mov	r0, r3
 8002534:	3710      	adds	r7, #16
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	40022000 	.word	0x40022000
 8002540:	40021000 	.word	0x40021000
 8002544:	0800d64c 	.word	0x0800d64c
 8002548:	20000018 	.word	0x20000018
 800254c:	2000001c 	.word	0x2000001c

08002550 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002550:	b480      	push	{r7}
 8002552:	b087      	sub	sp, #28
 8002554:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002556:	2300      	movs	r3, #0
 8002558:	60fb      	str	r3, [r7, #12]
 800255a:	2300      	movs	r3, #0
 800255c:	60bb      	str	r3, [r7, #8]
 800255e:	2300      	movs	r3, #0
 8002560:	617b      	str	r3, [r7, #20]
 8002562:	2300      	movs	r3, #0
 8002564:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002566:	2300      	movs	r3, #0
 8002568:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800256a:	4b1e      	ldr	r3, [pc, #120]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x94>)
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	f003 030c 	and.w	r3, r3, #12
 8002576:	2b04      	cmp	r3, #4
 8002578:	d002      	beq.n	8002580 <HAL_RCC_GetSysClockFreq+0x30>
 800257a:	2b08      	cmp	r3, #8
 800257c:	d003      	beq.n	8002586 <HAL_RCC_GetSysClockFreq+0x36>
 800257e:	e027      	b.n	80025d0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002580:	4b19      	ldr	r3, [pc, #100]	; (80025e8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002582:	613b      	str	r3, [r7, #16]
      break;
 8002584:	e027      	b.n	80025d6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	0c9b      	lsrs	r3, r3, #18
 800258a:	f003 030f 	and.w	r3, r3, #15
 800258e:	4a17      	ldr	r2, [pc, #92]	; (80025ec <HAL_RCC_GetSysClockFreq+0x9c>)
 8002590:	5cd3      	ldrb	r3, [r2, r3]
 8002592:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d010      	beq.n	80025c0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800259e:	4b11      	ldr	r3, [pc, #68]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x94>)
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	0c5b      	lsrs	r3, r3, #17
 80025a4:	f003 0301 	and.w	r3, r3, #1
 80025a8:	4a11      	ldr	r2, [pc, #68]	; (80025f0 <HAL_RCC_GetSysClockFreq+0xa0>)
 80025aa:	5cd3      	ldrb	r3, [r2, r3]
 80025ac:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4a0d      	ldr	r2, [pc, #52]	; (80025e8 <HAL_RCC_GetSysClockFreq+0x98>)
 80025b2:	fb03 f202 	mul.w	r2, r3, r2
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025bc:	617b      	str	r3, [r7, #20]
 80025be:	e004      	b.n	80025ca <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	4a0c      	ldr	r2, [pc, #48]	; (80025f4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80025c4:	fb02 f303 	mul.w	r3, r2, r3
 80025c8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	613b      	str	r3, [r7, #16]
      break;
 80025ce:	e002      	b.n	80025d6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80025d0:	4b05      	ldr	r3, [pc, #20]	; (80025e8 <HAL_RCC_GetSysClockFreq+0x98>)
 80025d2:	613b      	str	r3, [r7, #16]
      break;
 80025d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025d6:	693b      	ldr	r3, [r7, #16]
}
 80025d8:	4618      	mov	r0, r3
 80025da:	371c      	adds	r7, #28
 80025dc:	46bd      	mov	sp, r7
 80025de:	bc80      	pop	{r7}
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	40021000 	.word	0x40021000
 80025e8:	007a1200 	.word	0x007a1200
 80025ec:	0800d664 	.word	0x0800d664
 80025f0:	0800d674 	.word	0x0800d674
 80025f4:	003d0900 	.word	0x003d0900

080025f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025fc:	4b02      	ldr	r3, [pc, #8]	; (8002608 <HAL_RCC_GetHCLKFreq+0x10>)
 80025fe:	681b      	ldr	r3, [r3, #0]
}
 8002600:	4618      	mov	r0, r3
 8002602:	46bd      	mov	sp, r7
 8002604:	bc80      	pop	{r7}
 8002606:	4770      	bx	lr
 8002608:	20000018 	.word	0x20000018

0800260c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002610:	f7ff fff2 	bl	80025f8 <HAL_RCC_GetHCLKFreq>
 8002614:	4602      	mov	r2, r0
 8002616:	4b05      	ldr	r3, [pc, #20]	; (800262c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	0a1b      	lsrs	r3, r3, #8
 800261c:	f003 0307 	and.w	r3, r3, #7
 8002620:	4903      	ldr	r1, [pc, #12]	; (8002630 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002622:	5ccb      	ldrb	r3, [r1, r3]
 8002624:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002628:	4618      	mov	r0, r3
 800262a:	bd80      	pop	{r7, pc}
 800262c:	40021000 	.word	0x40021000
 8002630:	0800d65c 	.word	0x0800d65c

08002634 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002638:	f7ff ffde 	bl	80025f8 <HAL_RCC_GetHCLKFreq>
 800263c:	4602      	mov	r2, r0
 800263e:	4b05      	ldr	r3, [pc, #20]	; (8002654 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	0adb      	lsrs	r3, r3, #11
 8002644:	f003 0307 	and.w	r3, r3, #7
 8002648:	4903      	ldr	r1, [pc, #12]	; (8002658 <HAL_RCC_GetPCLK2Freq+0x24>)
 800264a:	5ccb      	ldrb	r3, [r1, r3]
 800264c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002650:	4618      	mov	r0, r3
 8002652:	bd80      	pop	{r7, pc}
 8002654:	40021000 	.word	0x40021000
 8002658:	0800d65c 	.word	0x0800d65c

0800265c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800265c:	b480      	push	{r7}
 800265e:	b085      	sub	sp, #20
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002664:	4b0a      	ldr	r3, [pc, #40]	; (8002690 <RCC_Delay+0x34>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a0a      	ldr	r2, [pc, #40]	; (8002694 <RCC_Delay+0x38>)
 800266a:	fba2 2303 	umull	r2, r3, r2, r3
 800266e:	0a5b      	lsrs	r3, r3, #9
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	fb02 f303 	mul.w	r3, r2, r3
 8002676:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002678:	bf00      	nop
  }
  while (Delay --);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	1e5a      	subs	r2, r3, #1
 800267e:	60fa      	str	r2, [r7, #12]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d1f9      	bne.n	8002678 <RCC_Delay+0x1c>
}
 8002684:	bf00      	nop
 8002686:	bf00      	nop
 8002688:	3714      	adds	r7, #20
 800268a:	46bd      	mov	sp, r7
 800268c:	bc80      	pop	{r7}
 800268e:	4770      	bx	lr
 8002690:	20000018 	.word	0x20000018
 8002694:	10624dd3 	.word	0x10624dd3

08002698 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d101      	bne.n	80026aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e076      	b.n	8002798 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d108      	bne.n	80026c4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80026ba:	d009      	beq.n	80026d0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	61da      	str	r2, [r3, #28]
 80026c2:	e005      	b.n	80026d0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2200      	movs	r2, #0
 80026d4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d106      	bne.n	80026f0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f7fd fe5e 	bl	80003ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2202      	movs	r2, #2
 80026f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002706:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002718:	431a      	orrs	r2, r3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002722:	431a      	orrs	r2, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	691b      	ldr	r3, [r3, #16]
 8002728:	f003 0302 	and.w	r3, r3, #2
 800272c:	431a      	orrs	r2, r3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	695b      	ldr	r3, [r3, #20]
 8002732:	f003 0301 	and.w	r3, r3, #1
 8002736:	431a      	orrs	r2, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	699b      	ldr	r3, [r3, #24]
 800273c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002740:	431a      	orrs	r2, r3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	69db      	ldr	r3, [r3, #28]
 8002746:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800274a:	431a      	orrs	r2, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6a1b      	ldr	r3, [r3, #32]
 8002750:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002754:	ea42 0103 	orr.w	r1, r2, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800275c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	430a      	orrs	r2, r1
 8002766:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	699b      	ldr	r3, [r3, #24]
 800276c:	0c1a      	lsrs	r2, r3, #16
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f002 0204 	and.w	r2, r2, #4
 8002776:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	69da      	ldr	r2, [r3, #28]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002786:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2201      	movs	r2, #1
 8002792:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002796:	2300      	movs	r3, #0
}
 8002798:	4618      	mov	r0, r3
 800279a:	3708      	adds	r7, #8
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}

080027a0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b088      	sub	sp, #32
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	60b9      	str	r1, [r7, #8]
 80027aa:	603b      	str	r3, [r7, #0]
 80027ac:	4613      	mov	r3, r2
 80027ae:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80027b0:	2300      	movs	r3, #0
 80027b2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d101      	bne.n	80027c2 <HAL_SPI_Transmit+0x22>
 80027be:	2302      	movs	r3, #2
 80027c0:	e12d      	b.n	8002a1e <HAL_SPI_Transmit+0x27e>
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2201      	movs	r2, #1
 80027c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80027ca:	f7ff f85b 	bl	8001884 <HAL_GetTick>
 80027ce:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80027d0:	88fb      	ldrh	r3, [r7, #6]
 80027d2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d002      	beq.n	80027e6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80027e0:	2302      	movs	r3, #2
 80027e2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80027e4:	e116      	b.n	8002a14 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d002      	beq.n	80027f2 <HAL_SPI_Transmit+0x52>
 80027ec:	88fb      	ldrh	r3, [r7, #6]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d102      	bne.n	80027f8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80027f6:	e10d      	b.n	8002a14 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2203      	movs	r2, #3
 80027fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2200      	movs	r2, #0
 8002804:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	68ba      	ldr	r2, [r7, #8]
 800280a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	88fa      	ldrh	r2, [r7, #6]
 8002810:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	88fa      	ldrh	r2, [r7, #6]
 8002816:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2200      	movs	r2, #0
 800281c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2200      	movs	r2, #0
 8002822:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2200      	movs	r2, #0
 8002828:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2200      	movs	r2, #0
 800282e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2200      	movs	r2, #0
 8002834:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800283e:	d10f      	bne.n	8002860 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800284e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800285e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800286a:	2b40      	cmp	r3, #64	; 0x40
 800286c:	d007      	beq.n	800287e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800287c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002886:	d14f      	bne.n	8002928 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d002      	beq.n	8002896 <HAL_SPI_Transmit+0xf6>
 8002890:	8afb      	ldrh	r3, [r7, #22]
 8002892:	2b01      	cmp	r3, #1
 8002894:	d142      	bne.n	800291c <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289a:	881a      	ldrh	r2, [r3, #0]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a6:	1c9a      	adds	r2, r3, #2
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	3b01      	subs	r3, #1
 80028b4:	b29a      	uxth	r2, r3
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80028ba:	e02f      	b.n	800291c <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	f003 0302 	and.w	r3, r3, #2
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d112      	bne.n	80028f0 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ce:	881a      	ldrh	r2, [r3, #0]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028da:	1c9a      	adds	r2, r3, #2
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	3b01      	subs	r3, #1
 80028e8:	b29a      	uxth	r2, r3
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	86da      	strh	r2, [r3, #54]	; 0x36
 80028ee:	e015      	b.n	800291c <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80028f0:	f7fe ffc8 	bl	8001884 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	69bb      	ldr	r3, [r7, #24]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	683a      	ldr	r2, [r7, #0]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d803      	bhi.n	8002908 <HAL_SPI_Transmit+0x168>
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002906:	d102      	bne.n	800290e <HAL_SPI_Transmit+0x16e>
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d106      	bne.n	800291c <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2201      	movs	r2, #1
 8002916:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800291a:	e07b      	b.n	8002a14 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002920:	b29b      	uxth	r3, r3
 8002922:	2b00      	cmp	r3, #0
 8002924:	d1ca      	bne.n	80028bc <HAL_SPI_Transmit+0x11c>
 8002926:	e050      	b.n	80029ca <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d002      	beq.n	8002936 <HAL_SPI_Transmit+0x196>
 8002930:	8afb      	ldrh	r3, [r7, #22]
 8002932:	2b01      	cmp	r3, #1
 8002934:	d144      	bne.n	80029c0 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	330c      	adds	r3, #12
 8002940:	7812      	ldrb	r2, [r2, #0]
 8002942:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002948:	1c5a      	adds	r2, r3, #1
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002952:	b29b      	uxth	r3, r3
 8002954:	3b01      	subs	r3, #1
 8002956:	b29a      	uxth	r2, r3
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800295c:	e030      	b.n	80029c0 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	f003 0302 	and.w	r3, r3, #2
 8002968:	2b02      	cmp	r3, #2
 800296a:	d113      	bne.n	8002994 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	330c      	adds	r3, #12
 8002976:	7812      	ldrb	r2, [r2, #0]
 8002978:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297e:	1c5a      	adds	r2, r3, #1
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002988:	b29b      	uxth	r3, r3
 800298a:	3b01      	subs	r3, #1
 800298c:	b29a      	uxth	r2, r3
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	86da      	strh	r2, [r3, #54]	; 0x36
 8002992:	e015      	b.n	80029c0 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002994:	f7fe ff76 	bl	8001884 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	69bb      	ldr	r3, [r7, #24]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	683a      	ldr	r2, [r7, #0]
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d803      	bhi.n	80029ac <HAL_SPI_Transmit+0x20c>
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029aa:	d102      	bne.n	80029b2 <HAL_SPI_Transmit+0x212>
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d106      	bne.n	80029c0 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2201      	movs	r2, #1
 80029ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80029be:	e029      	b.n	8002a14 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d1c9      	bne.n	800295e <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80029ca:	69ba      	ldr	r2, [r7, #24]
 80029cc:	6839      	ldr	r1, [r7, #0]
 80029ce:	68f8      	ldr	r0, [r7, #12]
 80029d0:	f000 f8b2 	bl	8002b38 <SPI_EndRxTxTransaction>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d002      	beq.n	80029e0 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2220      	movs	r2, #32
 80029de:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d10a      	bne.n	80029fe <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80029e8:	2300      	movs	r3, #0
 80029ea:	613b      	str	r3, [r7, #16]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	613b      	str	r3, [r7, #16]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	613b      	str	r3, [r7, #16]
 80029fc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d002      	beq.n	8002a0c <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	77fb      	strb	r3, [r7, #31]
 8002a0a:	e003      	b.n	8002a14 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2200      	movs	r2, #0
 8002a18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002a1c:	7ffb      	ldrb	r3, [r7, #31]
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3720      	adds	r7, #32
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
	...

08002a28 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b088      	sub	sp, #32
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	60b9      	str	r1, [r7, #8]
 8002a32:	603b      	str	r3, [r7, #0]
 8002a34:	4613      	mov	r3, r2
 8002a36:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002a38:	f7fe ff24 	bl	8001884 <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a40:	1a9b      	subs	r3, r3, r2
 8002a42:	683a      	ldr	r2, [r7, #0]
 8002a44:	4413      	add	r3, r2
 8002a46:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002a48:	f7fe ff1c 	bl	8001884 <HAL_GetTick>
 8002a4c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002a4e:	4b39      	ldr	r3, [pc, #228]	; (8002b34 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	015b      	lsls	r3, r3, #5
 8002a54:	0d1b      	lsrs	r3, r3, #20
 8002a56:	69fa      	ldr	r2, [r7, #28]
 8002a58:	fb02 f303 	mul.w	r3, r2, r3
 8002a5c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a5e:	e054      	b.n	8002b0a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a66:	d050      	beq.n	8002b0a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002a68:	f7fe ff0c 	bl	8001884 <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	69fa      	ldr	r2, [r7, #28]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d902      	bls.n	8002a7e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d13d      	bne.n	8002afa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	685a      	ldr	r2, [r3, #4]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002a8c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a96:	d111      	bne.n	8002abc <SPI_WaitFlagStateUntilTimeout+0x94>
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002aa0:	d004      	beq.n	8002aac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aaa:	d107      	bne.n	8002abc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002aba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ac4:	d10f      	bne.n	8002ae6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ad4:	601a      	str	r2, [r3, #0]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ae4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2200      	movs	r2, #0
 8002af2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e017      	b.n	8002b2a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d101      	bne.n	8002b04 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002b00:	2300      	movs	r3, #0
 8002b02:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	3b01      	subs	r3, #1
 8002b08:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	689a      	ldr	r2, [r3, #8]
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	4013      	ands	r3, r2
 8002b14:	68ba      	ldr	r2, [r7, #8]
 8002b16:	429a      	cmp	r2, r3
 8002b18:	bf0c      	ite	eq
 8002b1a:	2301      	moveq	r3, #1
 8002b1c:	2300      	movne	r3, #0
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	461a      	mov	r2, r3
 8002b22:	79fb      	ldrb	r3, [r7, #7]
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d19b      	bne.n	8002a60 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3720      	adds	r7, #32
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	20000018 	.word	0x20000018

08002b38 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b086      	sub	sp, #24
 8002b3c:	af02      	add	r7, sp, #8
 8002b3e:	60f8      	str	r0, [r7, #12]
 8002b40:	60b9      	str	r1, [r7, #8]
 8002b42:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	9300      	str	r3, [sp, #0]
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	2180      	movs	r1, #128	; 0x80
 8002b4e:	68f8      	ldr	r0, [r7, #12]
 8002b50:	f7ff ff6a 	bl	8002a28 <SPI_WaitFlagStateUntilTimeout>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d007      	beq.n	8002b6a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b5e:	f043 0220 	orr.w	r2, r3, #32
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e000      	b.n	8002b6c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002b6a:	2300      	movs	r3, #0
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3710      	adds	r7, #16
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d101      	bne.n	8002b86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e042      	b.n	8002c0c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d106      	bne.n	8002ba0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f7fe fdb6 	bl	800170c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2224      	movs	r2, #36	; 0x24
 8002ba4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	68da      	ldr	r2, [r3, #12]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002bb6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f000 f82b 	bl	8002c14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	691a      	ldr	r2, [r3, #16]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002bcc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	695a      	ldr	r2, [r3, #20]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002bdc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	68da      	ldr	r2, [r3, #12]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002bec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2220      	movs	r2, #32
 8002bf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2220      	movs	r2, #32
 8002c00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2200      	movs	r2, #0
 8002c08:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3708      	adds	r7, #8
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	691b      	ldr	r3, [r3, #16]
 8002c22:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	68da      	ldr	r2, [r3, #12]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	430a      	orrs	r2, r1
 8002c30:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	689a      	ldr	r2, [r3, #8]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	691b      	ldr	r3, [r3, #16]
 8002c3a:	431a      	orrs	r2, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	695b      	ldr	r3, [r3, #20]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	68db      	ldr	r3, [r3, #12]
 8002c4a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002c4e:	f023 030c 	bic.w	r3, r3, #12
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	6812      	ldr	r2, [r2, #0]
 8002c56:	68b9      	ldr	r1, [r7, #8]
 8002c58:	430b      	orrs	r3, r1
 8002c5a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	695b      	ldr	r3, [r3, #20]
 8002c62:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	699a      	ldr	r2, [r3, #24]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	430a      	orrs	r2, r1
 8002c70:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a2c      	ldr	r2, [pc, #176]	; (8002d28 <UART_SetConfig+0x114>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d103      	bne.n	8002c84 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002c7c:	f7ff fcda 	bl	8002634 <HAL_RCC_GetPCLK2Freq>
 8002c80:	60f8      	str	r0, [r7, #12]
 8002c82:	e002      	b.n	8002c8a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002c84:	f7ff fcc2 	bl	800260c <HAL_RCC_GetPCLK1Freq>
 8002c88:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c8a:	68fa      	ldr	r2, [r7, #12]
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	4413      	add	r3, r2
 8002c92:	009a      	lsls	r2, r3, #2
 8002c94:	441a      	add	r2, r3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ca0:	4a22      	ldr	r2, [pc, #136]	; (8002d2c <UART_SetConfig+0x118>)
 8002ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ca6:	095b      	lsrs	r3, r3, #5
 8002ca8:	0119      	lsls	r1, r3, #4
 8002caa:	68fa      	ldr	r2, [r7, #12]
 8002cac:	4613      	mov	r3, r2
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	4413      	add	r3, r2
 8002cb2:	009a      	lsls	r2, r3, #2
 8002cb4:	441a      	add	r2, r3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002cc0:	4b1a      	ldr	r3, [pc, #104]	; (8002d2c <UART_SetConfig+0x118>)
 8002cc2:	fba3 0302 	umull	r0, r3, r3, r2
 8002cc6:	095b      	lsrs	r3, r3, #5
 8002cc8:	2064      	movs	r0, #100	; 0x64
 8002cca:	fb00 f303 	mul.w	r3, r0, r3
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	011b      	lsls	r3, r3, #4
 8002cd2:	3332      	adds	r3, #50	; 0x32
 8002cd4:	4a15      	ldr	r2, [pc, #84]	; (8002d2c <UART_SetConfig+0x118>)
 8002cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cda:	095b      	lsrs	r3, r3, #5
 8002cdc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ce0:	4419      	add	r1, r3
 8002ce2:	68fa      	ldr	r2, [r7, #12]
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	4413      	add	r3, r2
 8002cea:	009a      	lsls	r2, r3, #2
 8002cec:	441a      	add	r2, r3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002cf8:	4b0c      	ldr	r3, [pc, #48]	; (8002d2c <UART_SetConfig+0x118>)
 8002cfa:	fba3 0302 	umull	r0, r3, r3, r2
 8002cfe:	095b      	lsrs	r3, r3, #5
 8002d00:	2064      	movs	r0, #100	; 0x64
 8002d02:	fb00 f303 	mul.w	r3, r0, r3
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	011b      	lsls	r3, r3, #4
 8002d0a:	3332      	adds	r3, #50	; 0x32
 8002d0c:	4a07      	ldr	r2, [pc, #28]	; (8002d2c <UART_SetConfig+0x118>)
 8002d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d12:	095b      	lsrs	r3, r3, #5
 8002d14:	f003 020f 	and.w	r2, r3, #15
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	440a      	add	r2, r1
 8002d1e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002d20:	bf00      	nop
 8002d22:	3710      	adds	r7, #16
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	40013800 	.word	0x40013800
 8002d2c:	51eb851f 	.word	0x51eb851f

08002d30 <memset>:
 8002d30:	4603      	mov	r3, r0
 8002d32:	4402      	add	r2, r0
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d100      	bne.n	8002d3a <memset+0xa>
 8002d38:	4770      	bx	lr
 8002d3a:	f803 1b01 	strb.w	r1, [r3], #1
 8002d3e:	e7f9      	b.n	8002d34 <memset+0x4>

08002d40 <__libc_init_array>:
 8002d40:	b570      	push	{r4, r5, r6, lr}
 8002d42:	2600      	movs	r6, #0
 8002d44:	4d0c      	ldr	r5, [pc, #48]	; (8002d78 <__libc_init_array+0x38>)
 8002d46:	4c0d      	ldr	r4, [pc, #52]	; (8002d7c <__libc_init_array+0x3c>)
 8002d48:	1b64      	subs	r4, r4, r5
 8002d4a:	10a4      	asrs	r4, r4, #2
 8002d4c:	42a6      	cmp	r6, r4
 8002d4e:	d109      	bne.n	8002d64 <__libc_init_array+0x24>
 8002d50:	f000 f81a 	bl	8002d88 <_init>
 8002d54:	2600      	movs	r6, #0
 8002d56:	4d0a      	ldr	r5, [pc, #40]	; (8002d80 <__libc_init_array+0x40>)
 8002d58:	4c0a      	ldr	r4, [pc, #40]	; (8002d84 <__libc_init_array+0x44>)
 8002d5a:	1b64      	subs	r4, r4, r5
 8002d5c:	10a4      	asrs	r4, r4, #2
 8002d5e:	42a6      	cmp	r6, r4
 8002d60:	d105      	bne.n	8002d6e <__libc_init_array+0x2e>
 8002d62:	bd70      	pop	{r4, r5, r6, pc}
 8002d64:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d68:	4798      	blx	r3
 8002d6a:	3601      	adds	r6, #1
 8002d6c:	e7ee      	b.n	8002d4c <__libc_init_array+0xc>
 8002d6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d72:	4798      	blx	r3
 8002d74:	3601      	adds	r6, #1
 8002d76:	e7f2      	b.n	8002d5e <__libc_init_array+0x1e>
 8002d78:	0800d678 	.word	0x0800d678
 8002d7c:	0800d678 	.word	0x0800d678
 8002d80:	0800d678 	.word	0x0800d678
 8002d84:	0800d67c 	.word	0x0800d67c

08002d88 <_init>:
 8002d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d8a:	bf00      	nop
 8002d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d8e:	bc08      	pop	{r3}
 8002d90:	469e      	mov	lr, r3
 8002d92:	4770      	bx	lr

08002d94 <_fini>:
 8002d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d96:	bf00      	nop
 8002d98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d9a:	bc08      	pop	{r3}
 8002d9c:	469e      	mov	lr, r3
 8002d9e:	4770      	bx	lr
